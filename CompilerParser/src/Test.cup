import java.util.*;
import java.io.*;
import java_cup.runtime.*;
action code
{:
Hashtable table = new Hashtable();
:};
parser code
{:
private Scanner scanner;
private File file;
public parser(File file) {
this();
this.file = file;
try {
Scanner = new Scanner(new FileReader(file));
}
catch (IOException exception ) {
throw new Error( "Unable to open file \"" + file + "\"" );
}
}
...
:};
scan with
{:
return lexer.yylex();
:}
//KEYWORDS
    //type and variable keywords
terminal const, record, bool, char, int, long, float, double, string, void, true, false, extern, auto, function;
    //flow control keywords
terminal begin, end, if, else, switch, of, case, default, for, foreach, in, repeat, until, break, continue, return;
    //other keywords
terminal sizeof;

//OPERATORS
terminal SEMI, COLEN, COMA, DOT, NOT, MINUS, TIMES, DIVIDE, PRECENTAGE, ASSIGN, AND, OR, HAT, not, and, or


terminal LEFT, RIGHT, NEWLINE, PLUS, MINUS, TIMES, DIVIDE, ASSIGN;
terminal String NUMBER;
terminal String IDENT;
nonterminal StmtList, Stmt;
nonterminal Integer Expr, Term, Factor;
start with StmtList;
StmtList::=
|
StmtList Stmt
;
Stmt::=
IDENT:ident ASSIGN Expr:expr NEWLINE
{:
table.put( ident, expr );
:}
|
Expr:expr NEWLINE
{:
System.out.println( expr.intValue() );
:}
|
error NEWLINE
|
NEWLINE
;
Expr::=
Expr:expr PLUS Term:term
{:
RESULT = new Integer( expr.intValue() + term.intValue() );
:}
|
Expr:expr MINUS Term:term
{:
RESULT = new Integer( expr.intValue() - term.intValue() );
:}
|
MINUS Term:term
{:
RESULT = new Integer( - term.intValue() );
:}
|
Term:term
{:
RESULT = term;
:}
;
Term::=
Term:term TIMES Factor:factor
{:
RESULT = new Integer( term.intValue() * factor.intValue() );
:}
|
Term:term DIVIDE Factor:factor
{:
RESULT = new Integer( term.intValue() / factor.intValue() );
:}
|
Factor:factor
{:
RESULT = factor;
:}
;
Factor::=
LEFT Expr:expr RIGHT
{:
RESULT = expr;
:}
|
NUMBER:value
{:
RESULT = new Integer( value );
:}
|
IDENT:ident
{:
Integer value = ( Integer ) table.get( ident );
if ( value == null ) {
parser.report_error( "Undeclared Identifier " + ident,
new Symbol( sym.IDENT, identleft, identright, ident ) );
value = new Integer( 0 );
}
RESULT = value;
:}
;