import java.util.*;
import java.io.*;
import java_cup.runtime.*;

action code
{:
Hashtable table = new Hashtable();
:};

/* The code below defines a constructor for the parser
 *class in which communication with Scanner class is made
*/
parser code {:
private Scanner scanner;
private File file;
parser (File file){
this();
this.file = file;
try {
Scanner = new Scanner(new FileReader(file));
}
catch (IOException exception ) {
throw new Error( "Unable to open file \"" + file + "\"" );
    }
  }
 :};

 scan with
 {:
 return scanner.yylex();
 :}

 //KEYWORDS
     //type and variable keywords
 terminal const, record, bool, char, int, long, float, double, string, void, true, false, extern, auto, function;
     //flow control keywords
 terminal begin, end, if, else, switch, of, case, default, for, foreach, in, repeat, until, break, continue, return;
     //other keywords
 terminal sizeof;

 //OPERATORS
 terminal SEMI, COLEN, COMA, DOT, NOT, MINUS,PLUSPLUS,MINUSMINUS,EPSILON, ASSIGN, AND, OR, HAT,NOT,GTE,GT,
            LTE,LT,EQ,NEQ,PARANTHESIS_O,PARANTHESIS_C,BRACKET_O,BRACKET_C,BITWISE_AND,BITWISE_ORR,BITWISE_EOR;


 terminal LEFT, RIGHT, NEWLINE, PLUS, MINUS, TIMES, DIVIDE,MODE, ASSIGN,UMINUS;
 terminal String NUMBER;
 terminal String IDENT;

 nonterminal const_value, variable,arrayDtector,expr,arithmatic,conditional,
            binary_operator;

/*
 * precedences and associativity
*/

precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left BITWISE_ORR;
precedence left BITWISE_EOR;
precedence left BITWISE_AND;
precedence left EQ,NEQ;
precedence left GTE,GT,LTE,LT;
precedence left PLUS,MINUS;
precedence left TIMES,DIVID,MODE;
precedence left NOT;
precedence left UMINUS;
precedence left PLUSPLUS,MINUSMINUS,PARANTHESIS_O,PARANTHESIS_C;


 stmt ::=
                   assignExp COLEN;

 variable ::=
                   id arrayDtector
                   |MINUSMINUS variable
                   |PLUSPLUS  variable
                   |variable PLUSPLUS
                   |variable MINUSMINUS
                   |variable DOT id;




arrayDtector ::=     EPSILON
                    |BRACKET_O expr BRACKET_C arrayDtector;


arithmatic ::=
                     MINUS
                    |PLUS
                    |TIMES
                    |DIVIDE
                    |MODE
                    |BITWISE_AND
                    |BITWISE_EOR
                    |BITWISE_ORR;

conditional ::=
                    AND
                    |OR
                    |EQ
                    |NEQ
                    |GTE
                    |GT
                    |LT
                    |LTE
                    |NOT;

binary_operator ::=
                   arithmatic
                   |conditional;

expr            ::=
                    PARANTHESIS_O expr PARANTHESIS_C
                    |variable
                    |expr binary_operator expr
                    |const_value
                    |NOT expr;
                    // mrthod_call , sizeOf remaining







