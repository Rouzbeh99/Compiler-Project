/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>../../src/Scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ENDOFLINECOMMENT = 2;
  public static final int MULTIPLELINECOMMENT = 4;
  public static final int STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\2\2\0\1\1\22\0\1\20\1\65\1\10\1\3"+
    "\1\0\1\52\1\54\1\7\1\63\1\64\1\51\1\15\1\47\1\16"+
    "\1\13\1\4\1\12\11\11\1\46\1\45\1\57\1\53\1\60\2\0"+
    "\32\17\1\61\1\5\1\62\1\56\1\17\1\0\1\33\1\30\1\21"+
    "\1\27\1\14\1\36\1\35\1\32\1\34\1\17\1\43\1\31\1\17"+
    "\1\23\1\22\1\42\1\17\1\26\1\24\1\25\1\37\1\6\1\41"+
    "\1\40\1\17\1\44\1\0\1\55\1\0\1\50\53\0\1\17\12\0"+
    "\1\17\4\0\1\17\5\0\27\17\1\0\37\17\1\0\u01ca\17\4\0"+
    "\14\17\16\0\5\17\7\0\1\17\1\0\1\17\21\0\165\17\1\0"+
    "\2\17\2\0\4\17\1\0\1\17\6\0\1\17\1\0\3\17\1\0"+
    "\1\17\1\0\24\17\1\0\123\17\1\0\213\17\1\0\255\17\1\0"+
    "\46\17\2\0\1\17\7\0\47\17\11\0\55\17\1\0\1\17\1\0"+
    "\2\17\1\0\2\17\1\0\1\17\10\0\33\17\5\0\3\17\35\0"+
    "\13\17\5\0\100\17\12\12\4\0\146\17\1\0\10\17\2\0\12\17"+
    "\1\0\6\17\12\12\3\17\2\0\1\17\20\0\73\17\2\0\145\17"+
    "\16\0\12\12\54\17\4\0\1\17\5\0\56\17\22\0\34\17\104\0"+
    "\25\17\1\0\10\17\26\0\16\17\1\0\201\17\2\0\12\12\1\0"+
    "\23\17\1\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\1\17\3\0\4\17\2\0\11\17\2\0\2\17\2\0\4\17\10\0"+
    "\1\17\4\0\2\17\1\0\5\17\2\0\12\12\2\17\17\0\3\17"+
    "\1\0\6\17\4\0\2\17\2\0\26\17\1\0\7\17\1\0\2\17"+
    "\1\0\2\17\1\0\2\17\2\0\1\17\1\0\5\17\4\0\2\17"+
    "\2\0\3\17\3\0\1\17\7\0\4\17\1\0\1\17\7\0\12\12"+
    "\6\17\13\0\3\17\1\0\11\17\1\0\3\17\1\0\26\17\1\0"+
    "\7\17\1\0\2\17\1\0\5\17\2\0\12\17\1\0\3\17\1\0"+
    "\3\17\2\0\1\17\17\0\4\17\2\0\12\12\11\0\1\17\7\0"+
    "\3\17\1\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\2\17\1\0\5\17\2\0\11\17\2\0\2\17\2\0\3\17\10\0"+
    "\2\17\4\0\2\17\1\0\5\17\2\0\12\12\1\0\1\17\20\0"+
    "\2\17\1\0\6\17\3\0\3\17\1\0\4\17\3\0\2\17\1\0"+
    "\1\17\1\0\2\17\3\0\2\17\3\0\3\17\3\0\14\17\4\0"+
    "\5\17\3\0\3\17\1\0\4\17\2\0\1\17\6\0\1\17\16\0"+
    "\12\12\20\0\4\17\1\0\10\17\1\0\3\17\1\0\27\17\1\0"+
    "\20\17\3\0\10\17\1\0\3\17\1\0\4\17\7\0\2\17\1\0"+
    "\3\17\5\0\4\17\2\0\12\12\20\0\4\17\1\0\10\17\1\0"+
    "\3\17\1\0\27\17\1\0\12\17\1\0\5\17\2\0\11\17\1\0"+
    "\3\17\1\0\4\17\7\0\2\17\7\0\1\17\1\0\4\17\2\0"+
    "\12\12\1\0\2\17\16\0\3\17\1\0\10\17\1\0\3\17\1\0"+
    "\51\17\2\0\10\17\1\0\3\17\1\0\5\17\5\0\4\17\7\0"+
    "\5\17\2\0\12\12\12\0\6\17\2\0\2\17\1\0\22\17\3\0"+
    "\30\17\1\0\11\17\1\0\1\17\2\0\7\17\3\0\1\17\4\0"+
    "\6\17\1\0\1\17\1\0\10\17\6\0\12\12\2\0\2\17\15\0"+
    "\72\17\5\0\17\17\1\0\12\12\47\0\2\17\1\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\1\17\6\0\4\17\1\0\7\17\1\0"+
    "\3\17\1\0\1\17\1\0\1\17\2\0\2\17\1\0\15\17\1\0"+
    "\3\17\2\0\5\17\1\0\1\17\1\0\6\17\2\0\12\12\2\0"+
    "\4\17\40\0\1\17\27\0\2\17\6\0\12\12\13\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\12\17\1\0\44\17\4\0\24\17\1\0"+
    "\22\17\1\0\44\17\11\0\1\17\71\0\100\17\12\12\6\0\100\17"+
    "\12\12\4\17\2\0\46\17\1\0\1\17\5\0\1\17\2\0\53\17"+
    "\1\0\u014d\17\1\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17"+
    "\2\0\51\17\1\0\4\17\2\0\41\17\1\0\4\17\2\0\7\17"+
    "\1\0\1\17\1\0\4\17\2\0\17\17\1\0\71\17\1\0\4\17"+
    "\2\0\103\17\2\0\3\17\40\0\20\17\20\0\126\17\2\0\6\17"+
    "\3\0\u026c\17\2\0\21\17\1\0\32\17\5\0\113\17\3\0\13\17"+
    "\7\0\15\17\1\0\7\17\13\0\25\17\13\0\24\17\14\0\15\17"+
    "\1\0\3\17\1\0\2\17\14\0\124\17\3\0\1\17\4\0\2\17"+
    "\2\0\12\12\41\0\3\17\2\0\12\12\6\0\130\17\10\0\53\17"+
    "\5\0\106\17\12\0\37\17\1\0\14\17\4\0\14\17\12\0\12\12"+
    "\36\17\2\0\5\17\13\0\54\17\4\0\32\17\6\0\12\12\46\0"+
    "\34\17\4\0\77\17\1\0\35\17\2\0\1\17\12\12\6\0\12\12"+
    "\15\0\1\17\10\0\17\17\101\0\114\17\4\0\12\12\21\0\11\17"+
    "\14\0\60\17\12\12\72\17\14\0\70\17\10\0\12\12\3\0\3\17"+
    "\12\12\44\17\2\0\11\17\107\0\3\17\1\0\43\17\1\0\2\17"+
    "\6\0\366\17\5\0\u011b\17\2\0\6\17\2\0\46\17\2\0\6\17"+
    "\2\0\10\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0\37\17"+
    "\2\0\65\17\1\0\7\17\1\0\1\17\3\0\3\17\1\0\7\17"+
    "\3\0\4\17\2\0\6\17\4\0\15\17\5\0\3\17\1\0\7\17"+
    "\102\0\2\17\23\0\1\17\34\0\1\17\15\0\1\17\20\0\15\17"+
    "\63\0\41\17\21\0\1\17\4\0\1\17\2\0\12\17\1\0\1\17"+
    "\3\0\5\17\6\0\1\17\1\0\1\17\1\0\1\17\1\0\4\17"+
    "\1\0\13\17\2\0\4\17\5\0\5\17\4\0\1\17\21\0\51\17"+
    "\u032d\0\64\17\u0716\0\57\17\1\0\57\17\1\0\205\17\6\0\11\17"+
    "\14\0\46\17\1\0\1\17\5\0\1\17\2\0\70\17\7\0\1\17"+
    "\17\0\30\17\11\0\7\17\1\0\7\17\1\0\7\17\1\0\7\17"+
    "\1\0\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0\40\17"+
    "\57\0\1\17\u01d5\0\3\17\31\0\17\17\1\0\5\17\2\0\5\17"+
    "\4\0\126\17\2\0\2\17\2\0\3\17\1\0\132\17\1\0\4\17"+
    "\5\0\51\17\3\0\136\17\21\0\33\17\65\0\20\17\u0200\0\u19b6\17"+
    "\112\0\u51d6\17\52\0\u048d\17\103\0\56\17\2\0\u010d\17\3\0\20\17"+
    "\12\12\2\17\24\0\63\17\1\0\12\17\1\0\163\17\45\0\11\17"+
    "\2\0\147\17\2\0\44\17\1\0\10\17\77\0\61\17\30\0\64\17"+
    "\14\0\106\17\12\0\12\12\6\0\30\17\3\0\1\17\1\0\1\17"+
    "\2\0\12\12\44\17\2\0\44\17\14\0\35\17\3\0\101\17\16\0"+
    "\1\17\12\12\6\0\20\17\12\12\5\17\1\0\67\17\11\0\16\17"+
    "\2\0\12\12\6\0\27\17\3\0\111\17\30\0\3\17\2\0\20\17"+
    "\2\0\5\17\12\0\6\17\2\0\6\17\2\0\6\17\11\0\7\17"+
    "\1\0\7\17\1\0\53\17\1\0\12\17\12\0\173\17\1\0\2\17"+
    "\2\0\12\12\6\0\u2ba4\17\14\0\27\17\4\0\61\17\u2104\0\u016e\17"+
    "\2\0\152\17\46\0\7\17\14\0\5\17\5\0\14\17\1\0\15\17"+
    "\1\0\5\17\1\0\1\17\1\0\2\17\1\0\2\17\1\0\154\17"+
    "\41\0\u016b\17\22\0\100\17\2\0\66\17\50\0\14\17\4\0\20\17"+
    "\20\0\20\17\3\0\2\17\30\0\3\17\40\0\5\17\1\0\207\17"+
    "\23\0\12\12\7\0\32\17\4\0\1\17\1\0\32\17\13\0\131\17"+
    "\3\0\6\17\2\0\6\17\2\0\6\17\2\0\3\17\43\0\14\17"+
    "\1\0\32\17\1\0\23\17\1\0\2\17\1\0\17\17\2\0\16\17"+
    "\42\0\173\17\105\0\65\17\210\0\1\17\202\0\35\17\3\0\61\17"+
    "\17\0\1\17\37\0\40\17\20\0\33\17\5\0\53\17\5\0\36\17"+
    "\2\0\44\17\4\0\10\17\1\0\5\17\52\0\236\17\2\0\12\12"+
    "\6\0\44\17\4\0\44\17\4\0\50\17\10\0\64\17\234\0\u0137\17"+
    "\11\0\26\17\12\0\10\17\230\0\6\17\2\0\1\17\1\0\54\17"+
    "\1\0\2\17\3\0\1\17\2\0\27\17\12\0\27\17\11\0\37\17"+
    "\101\0\23\17\1\0\2\17\12\0\26\17\12\0\32\17\106\0\70\17"+
    "\6\0\2\17\100\0\4\17\1\0\2\17\5\0\10\17\1\0\3\17"+
    "\1\0\33\17\4\0\3\17\4\0\1\17\40\0\35\17\3\0\35\17"+
    "\43\0\10\17\1\0\36\17\31\0\66\17\12\0\26\17\12\0\23\17"+
    "\15\0\22\17\156\0\111\17\67\0\63\17\15\0\63\17\u030d\0\107\17"+
    "\37\0\12\12\17\0\74\17\25\0\31\17\7\0\12\12\6\0\65\17"+
    "\1\0\12\12\20\0\44\17\2\0\1\17\11\0\105\17\5\0\3\17"+
    "\3\0\12\12\1\17\1\0\1\17\43\0\22\17\1\0\45\17\6\0"+
    "\1\17\101\0\7\17\1\0\1\17\1\0\4\17\1\0\17\17\1\0"+
    "\12\17\7\0\73\17\5\0\12\12\6\0\4\17\1\0\10\17\2\0"+
    "\2\17\2\0\26\17\1\0\7\17\1\0\2\17\1\0\5\17\2\0"+
    "\11\17\2\0\2\17\2\0\3\17\2\0\1\17\6\0\1\17\5\0"+
    "\7\17\2\0\7\17\3\0\5\17\213\0\113\17\5\0\12\12\46\0"+
    "\106\17\1\0\1\17\10\0\12\12\246\0\66\17\2\0\11\17\27\0"+
    "\6\17\42\0\101\17\3\0\1\17\13\0\12\12\46\0\70\17\10\0"+
    "\12\12\66\0\32\17\3\0\17\17\4\0\12\12\u0166\0\100\17\12\12"+
    "\25\0\1\17\u01c0\0\71\17\u0107\0\11\17\1\0\55\17\1\0\11\17"+
    "\17\0\12\12\30\0\36\17\2\0\26\17\1\0\16\17\u0349\0\u039a\17"+
    "\146\0\157\17\21\0\304\17\u0abc\0\u042f\17\u0fd1\0\u0247\17\u21b9\0\u0239\17"+
    "\7\0\37\17\1\0\12\12\146\0\36\17\2\0\5\17\13\0\67\17"+
    "\11\0\4\17\14\0\12\12\11\0\25\17\5\0\23\17\u0370\0\105\17"+
    "\13\0\57\17\20\0\21\17\100\0\1\17\37\0\u17ed\17\23\0\u02f3\17"+
    "\u250d\0\2\17\u0bfe\0\153\17\5\0\15\17\3\0\11\17\7\0\12\17"+
    "\3\0\2\17\u14c6\0\5\17\3\0\6\17\10\0\10\17\2\0\7\17"+
    "\36\0\4\17\224\0\3\17\u01bb\0\125\17\1\0\107\17\1\0\2\17"+
    "\2\0\1\17\2\0\2\17\2\0\4\17\1\0\14\17\1\0\1\17"+
    "\1\0\7\17\1\0\101\17\1\0\4\17\2\0\10\17\1\0\7\17"+
    "\1\0\34\17\1\0\4\17\1\0\5\17\1\0\1\17\3\0\7\17"+
    "\1\0\u0154\17\2\0\31\17\1\0\31\17\1\0\37\17\1\0\31\17"+
    "\1\0\37\17\1\0\31\17\1\0\37\17\1\0\31\17\1\0\37\17"+
    "\1\0\31\17\1\0\10\17\2\0\62\12\u0200\0\67\17\4\0\62\17"+
    "\10\0\1\17\16\0\1\17\26\0\5\17\1\0\17\17\u0550\0\7\17"+
    "\1\0\21\17\2\0\7\17\1\0\2\17\1\0\5\17\u07d5\0\305\17"+
    "\13\0\7\17\51\0\113\17\5\0\12\12\u04a6\0\4\17\1\0\33\17"+
    "\1\0\2\17\1\0\1\17\2\0\1\17\1\0\12\17\1\0\4\17"+
    "\1\0\1\17\1\0\1\17\6\0\1\17\4\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\3\17\1\0\2\17\1\0\1\17\2\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0\2\17"+
    "\1\0\1\17\2\0\4\17\1\0\7\17\1\0\4\17\1\0\4\17"+
    "\1\0\1\17\1\0\12\17\1\0\21\17\5\0\3\17\1\0\5\17"+
    "\1\0\21\17\u0274\0\32\17\6\0\32\17\6\0\32\17\u0e76\0\ua6d7\17"+
    "\51\0\u1035\17\13\0\336\17\2\0\u1682\17\u295e\0\u021e\17\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\17\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\0\1\2\1\3\2\0\1\4\1\3"+
    "\1\5\1\3\1\6\1\7\16\3\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\3\0\1\30\1\3"+
    "\3\0\1\31\1\32\4\3\1\33\1\34\1\35\1\36"+
    "\3\3\1\37\1\40\16\3\1\41\1\42\5\3\1\43"+
    "\1\44\1\45\1\46\1\47\2\0\1\3\1\50\1\0"+
    "\1\32\1\0\1\51\5\3\1\52\15\3\1\53\1\3"+
    "\1\54\1\55\4\3\1\56\1\32\1\57\3\3\1\60"+
    "\1\61\3\3\1\62\6\3\1\63\1\3\1\64\1\65"+
    "\6\3\1\66\11\3\1\67\1\70\1\3\1\71\1\72"+
    "\1\3\1\73\1\74\1\3\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\3\1\103\3\3\1\104\1\105\1\3"+
    "\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\66\0\66\0\66"+
    "\0\66\0\u05e8\0\66\0\u061e\0\66\0\66\0\66\0\u0654"+
    "\0\u068a\0\66\0\66\0\66\0\66\0\u06c0\0\u06f6\0\u072c"+
    "\0\66\0\u0762\0\u0798\0\u07ce\0\u0804\0\u017a\0\u083a\0\u0870"+
    "\0\u08a6\0\u08dc\0\u0912\0\66\0\66\0\66\0\66\0\u0948"+
    "\0\u097e\0\u09b4\0\u02f4\0\u02f4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u0ca8\0\u0cde\0\u02f4\0\u0d14\0\u0d4a\0\u0d80\0\u0db6"+
    "\0\u0dec\0\66\0\66\0\66\0\66\0\66\0\u0e22\0\u0e58"+
    "\0\u0e8e\0\66\0\u0ec4\0\u0efa\0\u0f30\0\u02f4\0\u0f66\0\u0f9c"+
    "\0\u0fd2\0\u1008\0\u103e\0\u02f4\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6"+
    "\0\u12fc\0\u02f4\0\u1332\0\u02f4\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u02f4\0\u0f30\0\u02f4\0\u1476\0\u14ac\0\u14e2\0\u02f4"+
    "\0\u02f4\0\u1518\0\u154e\0\u1584\0\u02f4\0\u15ba\0\u15f0\0\u1626"+
    "\0\u165c\0\u1692\0\u16c8\0\u02f4\0\u16fe\0\u02f4\0\u02f4\0\u1734"+
    "\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u02f4\0\u1878\0\u18ae"+
    "\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u02f4"+
    "\0\u02f4\0\u1a5e\0\u02f4\0\u02f4\0\u1a94\0\u02f4\0\u02f4\0\u1aca"+
    "\0\u02f4\0\u02f4\0\u02f4\0\u02f4\0\u02f4\0\u02f4\0\u1b00\0\u02f4"+
    "\0\u1b36\0\u1b6c\0\u1ba2\0\u02f4\0\u02f4\0\u1bd8\0\u02f4\0\u02f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\0\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\4\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\20\1\32\1\33\1\20\1\34\1\35"+
    "\5\20\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\70\0\1\4\66\0\1\57\65\0\1\60"+
    "\47\0\1\61\20\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\1\0\1\20\1\62\22\20\21\0\1\63"+
    "\2\0\2\63\1\64\60\63\1\11\2\0\2\11\1\65"+
    "\2\11\1\66\55\11\6\0\1\20\2\0\2\12\1\67"+
    "\1\70\2\0\1\20\1\0\24\20\27\0\1\20\2\0"+
    "\2\13\1\67\1\20\2\0\1\20\1\0\24\20\32\0"+
    "\2\67\61\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\71\5\20\1\72\6\20\1\73"+
    "\4\20\36\0\1\74\35\0\1\75\30\0\1\76\34\0"+
    "\1\77\20\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\24\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\1\20\1\100\7\20\1\101"+
    "\1\102\11\20\27\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\1\0\5\20\1\103\7\20\1\104\6\20"+
    "\27\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20"+
    "\1\0\1\20\1\105\22\20\27\0\1\20\2\0\2\20"+
    "\1\0\1\20\2\0\1\20\1\0\4\20\1\106\6\20"+
    "\1\107\4\20\1\110\3\20\27\0\1\20\2\0\2\20"+
    "\1\0\1\20\2\0\1\20\1\0\5\20\1\111\16\20"+
    "\27\0\1\20\2\0\2\20\1\0\1\112\2\0\1\20"+
    "\1\0\24\20\27\0\1\20\2\0\2\20\1\0\1\113"+
    "\2\0\1\20\1\0\1\20\1\114\22\20\27\0\1\20"+
    "\2\0\2\20\1\0\1\115\2\0\1\20\1\0\1\20"+
    "\1\116\3\20\1\117\16\20\27\0\1\20\2\0\2\20"+
    "\1\0\1\20\2\0\1\20\1\0\1\20\1\120\22\20"+
    "\27\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\121\13\20\1\122\5\20\27\0\1\20"+
    "\2\0\2\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\123\12\20\1\124\6\20\27\0\1\20\2\0\2\20"+
    "\1\0\1\20\2\0\1\20\1\0\1\20\1\125\6\20"+
    "\1\126\1\20\1\127\3\20\1\130\5\20\27\0\1\20"+
    "\2\0\2\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\131\21\20\74\0\1\132\65\0\1\133\65\0\1\134"+
    "\65\0\1\135\65\0\1\136\12\0\1\137\2\0\63\137"+
    "\3\60\1\140\62\60\6\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\13\20\1\141\10\20\30\0"+
    "\1\142\63\0\4\63\12\0\1\63\1\0\2\63\1\0"+
    "\1\63\2\0\1\63\2\0\1\63\34\0\4\11\12\0"+
    "\1\11\1\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\40\0\2\67\1\0\1\143\57\0\1\20\2\0"+
    "\2\144\1\0\1\20\2\145\1\20\1\0\24\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\6\20\1\146\15\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\3\20\1\147\20\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\4\20\1\150\17\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\151\21\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\12\20\1\152\11\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\3\20\1\153\20\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\4\20\1\154\17\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\5\20\1\155\16\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\23\20\1\156\27\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\1\0\13\20\1\157\10\20\27\0\1\20"+
    "\2\0\2\20\1\0\1\20\2\0\1\20\1\0\16\20"+
    "\1\160\5\20\27\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\1\0\1\161\3\20\1\162\14\20\1\163"+
    "\2\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\15\20\1\164\6\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\1\0\16\20\1\165"+
    "\5\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\14\20\1\166\7\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\1\0\1\20\1\167"+
    "\22\20\27\0\1\20\2\0\2\20\1\0\1\170\2\0"+
    "\1\20\1\0\24\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\171\21\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\6\20\1\172\15\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\4\20\1\173\17\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\4\20\1\174\17\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\5\20\1\175\16\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\1\20\1\176\22\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\10\20\1\177\13\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\2\20\1\200\21\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\4\20\1\201\17\20\21\0"+
    "\1\137\1\3\1\4\63\137\3\60\1\140\1\4\61\60"+
    "\6\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20"+
    "\1\0\6\20\1\202\15\20\32\0\2\203\2\0\2\145"+
    "\55\0\1\20\2\0\2\144\1\0\1\20\2\0\1\20"+
    "\1\0\24\20\32\0\2\203\61\0\1\20\2\0\2\20"+
    "\1\0\1\204\2\0\1\20\1\0\24\20\27\0\1\20"+
    "\2\0\2\20\1\0\1\205\2\0\1\20\1\0\24\20"+
    "\27\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20"+
    "\1\0\3\20\1\206\1\207\17\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\1\0\5\20\1\210"+
    "\16\20\27\0\1\20\2\0\2\20\1\0\1\211\2\0"+
    "\1\20\1\0\24\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\13\20\1\212\10\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\213\2\0\1\20\1\0"+
    "\24\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\4\20\1\214\17\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\215\2\0\1\20\1\0\24\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\1\20\1\216\22\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\16\20\1\217\5\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\220\2\0\1\20\1\0"+
    "\24\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\12\20\1\221\11\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\1\0\7\20\1\222"+
    "\14\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\13\20\1\223\10\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\1\0\10\20\1\224"+
    "\13\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\12\20\1\225\11\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\1\0\14\20\1\226"+
    "\7\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\1\20\1\227\22\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\230\2\0\1\20\1\0\24\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\12\20\1\231\11\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\3\20\1\232\20\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\1\233\23\20\27\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\1\0\13\20\1\234\10\20\27\0\1\20"+
    "\2\0\2\20\1\0\1\20\2\0\1\20\1\0\5\20"+
    "\1\235\16\20\27\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\1\0\4\20\1\236\17\20\27\0\1\20"+
    "\2\0\2\20\1\0\1\20\2\0\1\20\1\0\13\20"+
    "\1\237\10\20\27\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\240\21\20\27\0\1\20"+
    "\2\0\2\20\1\0\1\20\2\0\1\20\1\0\1\20"+
    "\1\241\22\20\27\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\1\0\1\242\23\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\1\0\5\20\1\243"+
    "\16\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\5\20\1\244\16\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\1\0\12\20\1\245"+
    "\11\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\16\20\1\246\5\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\1\0\10\20\1\247"+
    "\13\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\250\21\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\1\0\22\20\1\251"+
    "\1\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\12\20\1\252\11\20\27\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\1\0\4\20\1\253"+
    "\17\20\27\0\1\20\2\0\2\20\1\0\1\254\2\0"+
    "\1\20\1\0\24\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\4\20\1\255\17\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\10\20\1\256\13\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\257\21\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\2\20\1\260\21\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\14\20\1\261\7\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\15\20\1\262\6\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\11\20\1\263\12\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\6\20\1\264\15\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\265\21\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\20\2\0\1\20\1\0"+
    "\4\20\1\266\17\20\27\0\1\20\2\0\2\20\1\0"+
    "\1\20\2\0\1\20\1\0\10\20\1\267\13\20\27\0"+
    "\1\20\2\0\2\20\1\0\1\270\2\0\1\20\1\0"+
    "\24\20\27\0\1\20\2\0\2\20\1\0\1\20\2\0"+
    "\1\20\1\0\1\271\23\20\27\0\1\20\2\0\2\20"+
    "\1\0\1\20\2\0\1\20\1\0\13\20\1\272\10\20"+
    "\27\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20"+
    "\1\0\16\20\1\273\5\20\27\0\1\20\2\0\2\20"+
    "\1\0\1\20\2\0\1\20\1\0\4\20\1\274\17\20"+
    "\27\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20"+
    "\1\0\11\20\1\275\12\20\27\0\1\20\2\0\2\20"+
    "\1\0\1\20\2\0\1\20\1\0\1\20\1\276\22\20"+
    "\27\0\1\20\2\0\2\20\1\0\1\277\2\0\1\20"+
    "\1\0\24\20\27\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\300\21\20\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7182];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\1\1\11\1\0\2\1\2\0\24\1"+
    "\4\11\1\1\1\11\1\1\3\11\2\1\4\11\3\0"+
    "\1\11\1\1\3\0\6\1\4\11\32\1\5\11\2\0"+
    "\1\1\1\11\1\0\1\1\1\0\133\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    public int ICV;
    public double RCV;
    public StringBuilder string;
    public StringBuilder current;

    private Symbol token(int code){
        current = string;
        string = new StringBuilder(yytext());
        System.out.println(yytext());//debug
        return new Symbol(code, yytext());
    }

    private void parseRCV(String text){
        int index = text.indexOf("e");
        if(index > 0){
            int base = Integer.parseInt(text.substring(0, index));
            int exp = Integer.parseInt(text.substring(index + 1));
            RCV = base * Math.pow(10, exp);
        }else if(index < 0)
            RCV = Double.parseDouble(text);
        else
            throw new NumberFormatException();
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2908) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symbol.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 72: break;
          case 2: 
            { return token(Symbol.DIVIDE);
            } 
            // fall through
          case 73: break;
          case 3: 
            { return token(Symbol.ID);
            } 
            // fall through
          case 74: break;
          case 4: 
            { ICV = Integer.parseInt(yytext()); return token(Symbol.INT_LIT);
            } 
            // fall through
          case 75: break;
          case 5: 
            { return token(Symbol.DOT);
            } 
            // fall through
          case 76: break;
          case 6: 
            { return token(Symbol.PLUS);
            } 
            // fall through
          case 77: break;
          case 7: 
            { return token(Symbol.MINUS);
            } 
            // fall through
          case 78: break;
          case 8: 
            { return token(Symbol.SEMI);
            } 
            // fall through
          case 79: break;
          case 9: 
            { return token(Symbol.COL);
            } 
            // fall through
          case 80: break;
          case 10: 
            { return token(Symbol.COMA);
            } 
            // fall through
          case 81: break;
          case 11: 
            { return token(Symbol.BINOT);
            } 
            // fall through
          case 82: break;
          case 12: 
            { return token(Symbol.MULT);
            } 
            // fall through
          case 83: break;
          case 13: 
            { return token(Symbol.MOD);
            } 
            // fall through
          case 84: break;
          case 14: 
            { return token(Symbol.ASSIGN);
            } 
            // fall through
          case 85: break;
          case 15: 
            { return token(Symbol.BIAND);
            } 
            // fall through
          case 86: break;
          case 16: 
            { return token(Symbol.BIOR);
            } 
            // fall through
          case 87: break;
          case 17: 
            { return token(Symbol.BIEXOR);
            } 
            // fall through
          case 88: break;
          case 18: 
            { return token(Symbol.LT);
            } 
            // fall through
          case 89: break;
          case 19: 
            { return token(Symbol.GT);
            } 
            // fall through
          case 90: break;
          case 20: 
            { return token(Symbol.BRACKOP);
            } 
            // fall through
          case 91: break;
          case 21: 
            { return token(Symbol.BRACKCL);
            } 
            // fall through
          case 92: break;
          case 22: 
            { return token(Symbol.PRANTOP);
            } 
            // fall through
          case 93: break;
          case 23: 
            { return token(Symbol.PRANTCL);
            } 
            // fall through
          case 94: break;
          case 24: 
            { return token(Symbol.DIVASSIGN);
            } 
            // fall through
          case 95: break;
          case 25: 
            { return token(Symbol.STR_LIT);
            } 
            // fall through
          case 96: break;
          case 26: 
            { parseRCV(yytext()); return token(Symbol.FLOAT_LIT);
            } 
            // fall through
          case 97: break;
          case 27: 
            { return token(Symbol.PREFPLUS2);
            } 
            // fall through
          case 98: break;
          case 28: 
            { return token(Symbol.PLUSASSIGN);
            } 
            // fall through
          case 99: break;
          case 29: 
            { return token(Symbol.PREFMINUS2);
            } 
            // fall through
          case 100: break;
          case 30: 
            { return token(Symbol.MINUSASSIGN);
            } 
            // fall through
          case 101: break;
          case 31: 
            { return token(Symbol.OR);
            } 
            // fall through
          case 102: break;
          case 32: 
            { return token(Symbol.OF);
            } 
            // fall through
          case 103: break;
          case 33: 
            { return token(Symbol.IN);
            } 
            // fall through
          case 104: break;
          case 34: 
            { return token(Symbol.IF);
            } 
            // fall through
          case 105: break;
          case 35: 
            { return token(Symbol.MULTASSIGN);
            } 
            // fall through
          case 106: break;
          case 36: 
            { return token(Symbol.EQEQ);
            } 
            // fall through
          case 107: break;
          case 37: 
            { return token(Symbol.LTEQ);
            } 
            // fall through
          case 108: break;
          case 38: 
            { return token(Symbol.GTEQ);
            } 
            // fall through
          case 109: break;
          case 39: 
            { return token(Symbol.NOTEQ);
            } 
            // fall through
          case 110: break;
          case 40: 
            { return token(Symbol.CHAR_LIT);
            } 
            // fall through
          case 111: break;
          case 41: 
            { return token(Symbol.END);
            } 
            // fall through
          case 112: break;
          case 42: 
            { return token(Symbol.NOT);
            } 
            // fall through
          case 113: break;
          case 43: 
            { return token(Symbol.AND);
            } 
            // fall through
          case 114: break;
          case 44: 
            { return token(Symbol.INT);
            } 
            // fall through
          case 115: break;
          case 45: 
            { return token(Symbol.FOR);
            } 
            // fall through
          case 116: break;
          case 46: 
            { return token(Symbol.VOID);
            } 
            // fall through
          case 117: break;
          case 47: 
            { return token(Symbol.ELSE);
            } 
            // fall through
          case 118: break;
          case 48: 
            { return token(Symbol.CHAR);
            } 
            // fall through
          case 119: break;
          case 49: 
            { return token(Symbol.CASE);
            } 
            // fall through
          case 120: break;
          case 50: 
            { return token(Symbol.TRUE);
            } 
            // fall through
          case 121: break;
          case 51: 
            { return token(Symbol.BOOL);
            } 
            // fall through
          case 122: break;
          case 52: 
            { return token(Symbol.LONG);
            } 
            // fall through
          case 123: break;
          case 53: 
            { return token(Symbol.AUTO);
            } 
            // fall through
          case 124: break;
          case 54: 
            { return token(Symbol.CONST);
            } 
            // fall through
          case 125: break;
          case 55: 
            { return token(Symbol.BEGIN);
            } 
            // fall through
          case 126: break;
          case 56: 
            { return token(Symbol.BREAK);
            } 
            // fall through
          case 127: break;
          case 57: 
            { return token(Symbol.FLOAT);
            } 
            // fall through
          case 128: break;
          case 58: 
            { return token(Symbol.FALSE);
            } 
            // fall through
          case 129: break;
          case 59: 
            { return token(Symbol.UNTIL);
            } 
            // fall through
          case 130: break;
          case 60: 
            { return token(Symbol.EXTERN);
            } 
            // fall through
          case 131: break;
          case 61: 
            { return token(Symbol.STRING);
            } 
            // fall through
          case 132: break;
          case 62: 
            { return token(Symbol.SIZEOF);
            } 
            // fall through
          case 133: break;
          case 63: 
            { return token(Symbol.SWITCH);
            } 
            // fall through
          case 134: break;
          case 64: 
            { return token(Symbol.RECORD);
            } 
            // fall through
          case 135: break;
          case 65: 
            { return token(Symbol.RETURN);
            } 
            // fall through
          case 136: break;
          case 66: 
            { return token(Symbol.REPEAT);
            } 
            // fall through
          case 137: break;
          case 67: 
            { return token(Symbol.DOUBLE);
            } 
            // fall through
          case 138: break;
          case 68: 
            { return token(Symbol.DEFAULT);
            } 
            // fall through
          case 139: break;
          case 69: 
            { return token(Symbol.FOREACH);
            } 
            // fall through
          case 140: break;
          case 70: 
            { return token(Symbol.CONTINUE);
            } 
            // fall through
          case 141: break;
          case 71: 
            { return token(Symbol.FUNCTION);
            } 
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
