
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import ast.access.*;
import ast.block.Block;
import ast.block.BlockContent;
import ast.block.Blocks;
import ast.block.stmt.Statement;
import ast.block.stmt.assignment.*;
import ast.block.stmt.conditional.casestmt.Cases;
import ast.block.stmt.conditional.casestmt.Switch;
import ast.block.stmt.conditional.ifstmt.If;
import ast.block.stmt.function.FunctionCall;
import ast.block.stmt.function.Return;
import ast.block.stmt.loop.*;
import ast.dcl.CompleteDCL;
import ast.dcl.DCL;
import ast.dcl.array.ArrayDCL;
import ast.dcl.variable.VariableDCL;
import ast.dcl.variable.Variables;
import ast.expr.Expression;
import ast.expr.binary.arithmatic.*;
import ast.expr.binary.logical.*;
import ast.expr.constant.*;
import ast.expr.other.Casting;
import ast.expr.other.SizeOf;
import ast.expr.other.Variable;
import ast.expr.unary.arithmatic.BinaryNot;
import ast.expr.unary.arithmatic.Uminus;
import ast.expr.unary.arithmatic.dual.PostfixMinus2;
import ast.expr.unary.arithmatic.dual.PostfixPlus2;
import ast.expr.unary.arithmatic.dual.PrefixMinus2;
import ast.expr.unary.arithmatic.dual.PrefixPlus2;
import ast.expr.unary.logical.Not;
import ast.program.Program;
import ast.program.ProgramContent;
import ast.program.function.FunctionArguments;
import ast.program.function.FunctionDCL;
import ast.program.global.GlobalVarDCL;
import ast.program.structure.StructVarDCL;
import ast.program.structure.Structures;
import ast.type.Type;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\006\000\002\063\002\000\002\007\012\000\002" +
    "\010\003\000\002\010\003\000\002\064\002\000\002\011" +
    "\007\000\002\011\002\000\002\012\004\000\002\012\002" +
    "\000\002\013\005\000\002\013\002\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\065\002\000\002\066\002" +
    "\000\002\016\014\000\002\067\002\000\002\020\005\000" +
    "\002\020\002\000\002\017\005\000\002\017\004\000\002" +
    "\021\005\000\002\022\004\000\002\022\002\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\070\002\000" +
    "\002\024\006\000\002\025\004\000\002\025\004\000\002" +
    "\025\002\000\002\071\002\000\002\026\006\000\002\026" +
    "\004\000\002\072\002\000\002\073\002\000\002\027\007" +
    "\000\002\030\004\000\002\031\004\000\002\031\002\000" +
    "\002\074\002\000\002\032\006\000\002\032\002\000\002" +
    "\033\004\000\002\034\006\000\002\034\002\000\002\035" +
    "\003\000\002\035\003\000\002\035\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\005\000" +
    "\002\036\010\000\002\075\002\000\002\036\017\000\002" +
    "\037\004\000\002\037\002\000\002\076\002\000\002\040" +
    "\010\000\002\040\002\000\002\041\013\000\002\041\011" +
    "\000\002\041\011\000\002\042\003\000\002\042\002\000" +
    "\002\043\003\000\002\043\002\000\002\044\003\000\002" +
    "\044\002\000\002\045\005\000\002\045\005\000\002\045" +
    "\005\000\002\045\005\000\002\045\005\000\002\046\003" +
    "\000\002\046\005\000\002\047\004\000\002\050\006\000" +
    "\002\050\002\000\002\051\003\000\002\051\005\000\002" +
    "\051\004\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\051\006\000\002\051\006\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\053\005\000\002\053\005\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\077\002\000\002\056\007\000\002\100\002\000\002\057" +
    "\005\000\002\057\002\000\002\060\004\000\002\060\002" +
    "\000\002\061\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\026\002\uffff\005\011\006\007\007\022\010" +
    "\004\011\006\012\021\013\013\020\012\022\016\001\002" +
    "\000\004\116\ufff8\001\002\000\026\002\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\020\ufffd" +
    "\022\ufffd\001\002\000\004\116\ufff7\001\002\000\004\116" +
    "\ufffa\001\002\000\004\002\u0123\001\002\000\004\116\uffd6" +
    "\001\002\000\022\006\030\007\036\010\026\011\027\012" +
    "\035\013\033\014\032\015\031\001\002\000\004\116\ufff5" +
    "\001\002\000\004\116\037\001\002\000\026\002\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\020\ufffc\022\ufffc\001\002\000\022\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\001\002" +
    "\000\026\002\uffff\005\011\006\007\007\022\010\004\011" +
    "\006\012\021\013\013\020\012\022\016\001\002\000\026" +
    "\002\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\020\ufffe\022\ufffe\001\002\000\004\116\ufff6" +
    "\001\002\000\004\116\ufff9\001\002\000\004\002\000\001" +
    "\002\000\022\006\030\007\036\010\026\011\027\012\035" +
    "\013\033\014\032\015\031\001\002\000\004\116\uffdf\001" +
    "\002\000\004\116\uffdb\001\002\000\004\116\uffda\001\002" +
    "\000\004\116\uffdd\001\002\000\004\116\uffde\001\002\000" +
    "\004\116\uffd7\001\002\000\004\116\uffd8\001\002\000\004" +
    "\116\037\001\002\000\004\116\uffd9\001\002\000\004\116" +
    "\uffdc\001\002\000\104\023\uff5f\035\uff5f\044\uff5f\046\uff5f" +
    "\047\uff5f\051\uff5f\052\uff5f\054\uff5f\055\uff5f\056\uff5f\057" +
    "\uff5f\060\uff5f\061\uff5f\062\uff5f\064\uff5f\065\uff5f\066\uff5f" +
    "\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073\uff5f\076\uff5f\077" +
    "\uff5f\102\uff5f\103\uff5f\104\uff5f\105\uff5f\106\uff5f\107\uff5f" +
    "\110\uff5f\111\uff5f\116\uff5f\001\002\000\004\072\041\001" +
    "\002\000\026\006\046\007\054\010\042\011\045\012\053" +
    "\013\050\014\047\021\052\073\uffe4\116\037\001\002\000" +
    "\006\073\ufff2\116\ufff2\001\002\000\006\073\uffec\116\uffec" +
    "\001\002\000\004\073\066\001\002\000\006\073\ufff1\116" +
    "\ufff1\001\002\000\006\073\ufff4\116\ufff4\001\002\000\006" +
    "\073\uffee\116\uffee\001\002\000\006\073\uffef\116\uffef\001" +
    "\002\000\004\116\037\001\002\000\006\073\uffed\116\uffed" +
    "\001\002\000\006\073\ufff0\116\ufff0\001\002\000\006\073" +
    "\ufff3\116\ufff3\001\002\000\010\046\uffe0\070\057\073\uffe0" +
    "\001\002\000\006\046\uffe6\073\uffe6\001\002\000\004\071" +
    "\060\001\002\000\010\046\uffe0\070\057\073\uffe0\001\002" +
    "\000\006\046\uffe1\073\uffe1\001\002\000\006\046\063\073" +
    "\uffe2\001\002\000\026\006\046\007\054\010\042\011\045" +
    "\012\053\013\050\014\047\021\052\073\uffe4\116\037\001" +
    "\002\000\004\073\uffe5\001\002\000\004\073\uffe3\001\002" +
    "\000\006\023\070\044\071\001\002\000\026\002\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\020\uffe9\022\uffe9\001\002\000\050\004\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\021\uffc5" +
    "\024\uffc5\025\uffc5\027\uffc5\033\uffc5\034\uffc5\036\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\116\uffc5\001\002\000\026\002\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\020\uffe8\022\uffe8\001\002\000\026\002\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\020" +
    "\uffe7\022\uffe7\001\002\000\050\004\111\006\046\007\054" +
    "\010\042\011\045\012\053\013\050\014\047\021\052\024" +
    "\uffc1\025\101\027\100\033\115\034\104\036\117\040\106" +
    "\041\074\042\076\116\037\001\002\000\004\044\u0101\001" +
    "\002\000\050\004\111\006\046\007\054\010\042\011\045" +
    "\012\053\013\050\014\047\021\052\024\uffc1\025\101\027" +
    "\100\033\115\034\104\036\117\040\106\041\074\042\076" +
    "\116\037\001\002\000\036\016\130\017\135\043\124\050" +
    "\144\052\136\063\126\072\133\076\141\077\142\112\146" +
    "\113\134\114\140\115\145\116\037\001\002\000\004\044" +
    "\375\001\002\000\004\072\352\001\002\000\004\072\343" +
    "\001\002\000\004\024\342\001\002\000\050\004\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\021\uffb0\024\uffb0\025\uffb0\027\uffb0\033\uffb0\034\uffb0\036" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\116\uffb0\001\002\000\004" +
    "\072\334\001\002\000\024\047\uff90\057\uff90\070\214\072" +
    "\uff66\102\uff90\103\uff90\104\uff90\105\uff90\116\uffec\001\002" +
    "\000\004\044\333\001\002\000\004\044\332\001\002\000" +
    "\050\004\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\021\uffb1\024\uffb1\025\uffb1\027\uffb1\033" +
    "\uffb1\034\uffb1\036\uffb1\040\uffb1\041\uffb1\042\uffb1\116\uffb1" +
    "\001\002\000\024\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\021\uffc0\116\uffc0\001\002\000\004" +
    "\116\uffbd\001\002\000\016\047\224\057\303\102\302\103" +
    "\277\104\300\105\301\001\002\000\004\044\276\001\002" +
    "\000\004\072\263\001\002\000\050\004\111\006\046\007" +
    "\054\010\042\011\045\012\053\013\050\014\047\021\052" +
    "\024\uffc1\025\101\027\100\033\115\034\104\036\117\040" +
    "\106\041\074\042\076\116\037\001\002\000\004\023\070" +
    "\001\002\000\072\044\uff94\046\uff94\047\uff94\051\uff94\052" +
    "\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94" +
    "\062\uff94\064\uff94\065\uff94\066\uff94\067\uff94\071\uff94\073" +
    "\uff94\076\uff94\077\uff94\102\uff94\103\uff94\104\uff94\105\uff94" +
    "\106\uff94\107\uff94\110\uff94\111\uff94\001\002\000\004\037" +
    "\122\001\002\000\004\072\123\001\002\000\036\016\130" +
    "\017\135\043\124\050\144\052\136\063\126\072\133\076" +
    "\141\077\142\112\146\113\134\114\140\115\145\116\037" +
    "\001\002\000\004\072\257\001\002\000\044\051\162\052" +
    "\152\054\160\055\154\056\157\060\156\061\163\062\165" +
    "\064\151\065\170\066\166\067\164\073\255\106\161\107" +
    "\153\110\167\111\155\001\002\000\036\016\130\017\135" +
    "\043\124\050\144\052\136\063\126\072\133\076\141\077" +
    "\142\112\146\113\134\114\140\115\145\116\037\001\002" +
    "\000\052\044\uff81\046\uff81\051\uff81\052\uff81\054\uff81\055" +
    "\uff81\056\uff81\060\uff81\061\uff81\062\uff81\064\uff81\065\uff81" +
    "\066\uff81\067\uff81\071\uff81\073\uff81\106\uff81\107\uff81\110" +
    "\uff81\111\uff81\001\002\000\052\044\uff6c\046\uff6c\051\uff6c" +
    "\052\uff6c\054\uff6c\055\uff6c\056\uff6c\060\uff6c\061\uff6c\062" +
    "\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\071\uff6c\073\uff6c" +
    "\106\uff6c\107\uff6c\110\uff6c\111\uff6c\001\002\000\052\044" +
    "\uff84\046\uff84\051\uff84\052\uff84\054\uff84\055\uff84\056\uff84" +
    "\060\uff84\061\uff84\062\uff84\064\uff84\065\uff84\066\uff84\067" +
    "\uff84\071\uff84\073\uff84\106\uff84\107\uff84\110\uff84\111\uff84" +
    "\001\002\000\064\044\uff90\046\uff90\047\uff90\051\uff90\052" +
    "\uff90\054\uff90\055\uff90\056\uff90\060\uff90\061\uff90\062\uff90" +
    "\064\uff90\065\uff90\066\uff90\067\uff90\070\214\071\uff90\072" +
    "\uff66\073\uff90\076\uff90\077\uff90\106\uff90\107\uff90\110\uff90" +
    "\111\uff90\001\002\000\046\007\234\010\233\012\236\013" +
    "\237\016\130\017\135\043\124\050\144\052\136\063\126" +
    "\072\133\076\141\077\142\112\146\113\134\114\140\115" +
    "\145\116\037\001\002\000\052\044\uff67\046\uff67\051\uff67" +
    "\052\uff67\054\uff67\055\uff67\056\uff67\060\uff67\061\uff67\062" +
    "\uff67\064\uff67\065\uff67\066\uff67\067\uff67\071\uff67\073\uff67" +
    "\106\uff67\107\uff67\110\uff67\111\uff67\001\002\000\052\044" +
    "\uff6b\046\uff6b\051\uff6b\052\uff6b\054\uff6b\055\uff6b\056\uff6b" +
    "\060\uff6b\061\uff6b\062\uff6b\064\uff6b\065\uff6b\066\uff6b\067" +
    "\uff6b\071\uff6b\073\uff6b\106\uff6b\107\uff6b\110\uff6b\111\uff6b" +
    "\001\002\000\036\016\130\017\135\043\124\050\144\052" +
    "\136\063\126\072\133\076\141\077\142\112\146\113\134" +
    "\114\140\115\145\116\037\001\002\000\060\044\uff82\046" +
    "\uff82\047\224\051\uff82\052\uff82\054\uff82\055\uff82\056\uff82" +
    "\060\uff82\061\uff82\062\uff82\064\uff82\065\uff82\066\uff82\067" +
    "\uff82\071\uff82\073\uff82\076\227\077\230\106\uff82\107\uff82" +
    "\110\uff82\111\uff82\001\002\000\052\044\uff69\046\uff69\051" +
    "\uff69\052\uff69\054\uff69\055\uff69\056\uff69\060\uff69\061\uff69" +
    "\062\uff69\064\uff69\065\uff69\066\uff69\067\uff69\071\uff69\073" +
    "\uff69\106\uff69\107\uff69\110\uff69\111\uff69\001\002\000\004" +
    "\116\037\001\002\000\004\116\037\001\002\000\052\044" +
    "\uff8f\046\uff8f\051\uff8f\052\uff8f\054\uff8f\055\uff8f\056\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\064\uff8f\065\uff8f\066\uff8f\067" +
    "\uff8f\071\uff8f\073\uff8f\106\uff8f\107\uff8f\110\uff8f\111\uff8f" +
    "\001\002\000\036\016\130\017\135\043\124\050\144\052" +
    "\136\063\126\072\133\076\141\077\142\112\146\113\134" +
    "\114\140\115\145\116\037\001\002\000\052\044\uff68\046" +
    "\uff68\051\uff68\052\uff68\054\uff68\055\uff68\056\uff68\060\uff68" +
    "\061\uff68\062\uff68\064\uff68\065\uff68\066\uff68\067\uff68\071" +
    "\uff68\073\uff68\106\uff68\107\uff68\110\uff68\111\uff68\001\002" +
    "\000\052\044\uff6a\046\uff6a\051\uff6a\052\uff6a\054\uff6a\055" +
    "\uff6a\056\uff6a\060\uff6a\061\uff6a\062\uff6a\064\uff6a\065\uff6a" +
    "\066\uff6a\067\uff6a\071\uff6a\073\uff6a\106\uff6a\107\uff6a\110" +
    "\uff6a\111\uff6a\001\002\000\052\044\uff83\046\uff83\051\uff83" +
    "\052\uff83\054\uff83\055\uff83\056\uff83\060\uff83\061\uff83\062" +
    "\uff83\064\uff83\065\uff83\066\uff83\067\uff83\071\uff83\073\uff83" +
    "\106\uff83\107\uff83\110\uff83\111\uff83\001\002\000\052\044" +
    "\uff8c\046\uff8c\051\uff8c\052\uff8c\054\uff8c\055\uff8c\056\uff8c" +
    "\060\uff8c\061\uff8c\062\uff8c\064\uff8c\065\uff8c\066\uff8c\067" +
    "\uff8c\071\uff8c\073\uff8c\106\uff8c\107\uff8c\110\uff8c\111\uff8c" +
    "\001\002\000\036\016\130\017\135\043\124\050\144\052" +
    "\136\063\126\072\133\076\141\077\142\112\146\113\134" +
    "\114\140\115\145\116\037\001\002\000\036\016\130\017" +
    "\135\043\124\050\144\052\136\063\126\072\133\076\141" +
    "\077\142\112\146\113\134\114\140\115\145\116\037\001" +
    "\002\000\036\016\130\017\135\043\124\050\144\052\136" +
    "\063\126\072\133\076\141\077\142\112\146\113\134\114" +
    "\140\115\145\116\037\001\002\000\036\016\130\017\135" +
    "\043\124\050\144\052\136\063\126\072\133\076\141\077" +
    "\142\112\146\113\134\114\140\115\145\116\037\001\002" +
    "\000\036\016\130\017\135\043\124\050\144\052\136\063" +
    "\126\072\133\076\141\077\142\112\146\113\134\114\140" +
    "\115\145\116\037\001\002\000\036\016\130\017\135\043" +
    "\124\050\144\052\136\063\126\072\133\076\141\077\142" +
    "\112\146\113\134\114\140\115\145\116\037\001\002\000" +
    "\036\016\130\017\135\043\124\050\144\052\136\063\126" +
    "\072\133\076\141\077\142\112\146\113\134\114\140\115" +
    "\145\116\037\001\002\000\036\016\130\017\135\043\124" +
    "\050\144\052\136\063\126\072\133\076\141\077\142\112" +
    "\146\113\134\114\140\115\145\116\037\001\002\000\036" +
    "\016\130\017\135\043\124\050\144\052\136\063\126\072" +
    "\133\076\141\077\142\112\146\113\134\114\140\115\145" +
    "\116\037\001\002\000\036\016\130\017\135\043\124\050" +
    "\144\052\136\063\126\072\133\076\141\077\142\112\146" +
    "\113\134\114\140\115\145\116\037\001\002\000\036\016" +
    "\130\017\135\043\124\050\144\052\136\063\126\072\133" +
    "\076\141\077\142\112\146\113\134\114\140\115\145\116" +
    "\037\001\002\000\036\016\130\017\135\043\124\050\144" +
    "\052\136\063\126\072\133\076\141\077\142\112\146\113" +
    "\134\114\140\115\145\116\037\001\002\000\036\016\130" +
    "\017\135\043\124\050\144\052\136\063\126\072\133\076" +
    "\141\077\142\112\146\113\134\114\140\115\145\116\037" +
    "\001\002\000\036\016\130\017\135\043\124\050\144\052" +
    "\136\063\126\072\133\076\141\077\142\112\146\113\134" +
    "\114\140\115\145\116\037\001\002\000\036\016\130\017" +
    "\135\043\124\050\144\052\136\063\126\072\133\076\141" +
    "\077\142\112\146\113\134\114\140\115\145\116\037\001" +
    "\002\000\036\016\130\017\135\043\124\050\144\052\136" +
    "\063\126\072\133\076\141\077\142\112\146\113\134\114" +
    "\140\115\145\116\037\001\002\000\052\044\uff6d\046\uff6d" +
    "\051\162\052\152\054\160\055\154\056\157\060\156\061" +
    "\163\062\165\064\151\065\uff6d\066\166\067\164\071\uff6d" +
    "\073\uff6d\106\161\107\153\110\167\111\155\001\002\000" +
    "\052\044\uff73\046\uff73\051\162\052\152\054\160\055\154" +
    "\056\157\060\uff73\061\uff73\062\uff73\064\uff73\065\uff73\066" +
    "\uff73\067\uff73\071\uff73\073\uff73\106\uff73\107\uff73\110\uff73" +
    "\111\uff73\001\002\000\052\044\uff74\046\uff74\051\162\052" +
    "\152\054\160\055\154\056\157\060\uff74\061\uff74\062\uff74" +
    "\064\uff74\065\uff74\066\uff74\067\uff74\071\uff74\073\uff74\106" +
    "\uff74\107\uff74\110\uff74\111\uff74\001\002\000\052\044\uff75" +
    "\046\uff75\051\162\052\152\054\160\055\154\056\157\060" +
    "\156\061\uff75\062\uff75\064\uff75\065\uff75\066\166\067\164" +
    "\071\uff75\073\uff75\106\161\107\153\110\167\111\155\001" +
    "\002\000\052\044\uff72\046\uff72\051\162\052\152\054\160" +
    "\055\154\056\157\060\uff72\061\uff72\062\uff72\064\uff72\065" +
    "\uff72\066\166\067\uff72\071\uff72\073\uff72\106\uff72\107\uff72" +
    "\110\167\111\uff72\001\002\000\052\044\uff76\046\uff76\051" +
    "\162\052\152\054\160\055\154\056\157\060\156\061\uff76" +
    "\062\165\064\uff76\065\uff76\066\166\067\164\071\uff76\073" +
    "\uff76\106\161\107\153\110\167\111\155\001\002\000\052" +
    "\044\uff79\046\uff79\051\uff79\052\uff79\054\160\055\154\056" +
    "\157\060\uff79\061\uff79\062\uff79\064\uff79\065\uff79\066\uff79" +
    "\067\uff79\071\uff79\073\uff79\106\uff79\107\uff79\110\uff79\111" +
    "\uff79\001\002\000\052\044\uff6f\046\uff6f\051\162\052\152" +
    "\054\160\055\154\056\157\060\uff6f\061\uff6f\062\uff6f\064" +
    "\uff6f\065\uff6f\066\166\067\164\071\uff6f\073\uff6f\106\uff6f" +
    "\107\uff6f\110\167\111\155\001\002\000\052\044\uff7c\046" +
    "\uff7c\051\uff7c\052\uff7c\054\uff7c\055\uff7c\056\uff7c\060\uff7c" +
    "\061\uff7c\062\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\071" +
    "\uff7c\073\uff7c\106\uff7c\107\uff7c\110\uff7c\111\uff7c\001\002" +
    "\000\052\044\uff7a\046\uff7a\051\uff7a\052\uff7a\054\uff7a\055" +
    "\uff7a\056\uff7a\060\uff7a\061\uff7a\062\uff7a\064\uff7a\065\uff7a" +
    "\066\uff7a\067\uff7a\071\uff7a\073\uff7a\106\uff7a\107\uff7a\110" +
    "\uff7a\111\uff7a\001\002\000\052\044\uff77\046\uff77\051\162" +
    "\052\152\054\160\055\154\056\157\060\uff77\061\uff77\062" +
    "\uff77\064\uff77\065\uff77\066\166\067\164\071\uff77\073\uff77" +
    "\106\161\107\153\110\167\111\155\001\002\000\052\044" +
    "\uff71\046\uff71\051\162\052\152\054\160\055\154\056\157" +
    "\060\uff71\061\uff71\062\uff71\064\uff71\065\uff71\066\166\067" +
    "\uff71\071\uff71\073\uff71\106\uff71\107\uff71\110\167\111\uff71" +
    "\001\002\000\052\044\uff7b\046\uff7b\051\uff7b\052\uff7b\054" +
    "\uff7b\055\uff7b\056\uff7b\060\uff7b\061\uff7b\062\uff7b\064\uff7b" +
    "\065\uff7b\066\uff7b\067\uff7b\071\uff7b\073\uff7b\106\uff7b\107" +
    "\uff7b\110\uff7b\111\uff7b\001\002\000\052\044\uff70\046\uff70" +
    "\051\162\052\152\054\160\055\154\056\157\060\uff70\061" +
    "\uff70\062\uff70\064\uff70\065\uff70\066\166\067\164\071\uff70" +
    "\073\uff70\106\uff70\107\uff70\110\167\111\155\001\002\000" +
    "\052\044\uff78\046\uff78\051\uff78\052\uff78\054\160\055\154" +
    "\056\157\060\uff78\061\uff78\062\uff78\064\uff78\065\uff78\066" +
    "\uff78\067\uff78\071\uff78\073\uff78\106\uff78\107\uff78\110\uff78" +
    "\111\uff78\001\002\000\052\044\uff6e\046\uff6e\051\162\052" +
    "\152\054\160\055\154\056\157\060\156\061\163\062\165" +
    "\064\uff6e\065\uff6e\066\166\067\164\071\uff6e\073\uff6e\106" +
    "\161\107\153\110\167\111\155\001\002\000\054\044\uff8a" +
    "\046\uff8a\047\224\051\uff8a\052\uff8a\054\uff8a\055\uff8a\056" +
    "\uff8a\060\uff8a\061\uff8a\062\uff8a\064\uff8a\065\uff8a\066\uff8a" +
    "\067\uff8a\071\uff8a\073\uff8a\106\uff8a\107\uff8a\110\uff8a\111" +
    "\uff8a\001\002\000\070\044\uff90\046\uff90\047\uff90\051\uff90" +
    "\052\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061" +
    "\uff90\062\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\214" +
    "\071\uff90\073\uff90\102\uff90\103\uff90\104\uff90\105\uff90\106" +
    "\uff90\107\uff90\110\uff90\111\uff90\001\002\000\072\044\uff92" +
    "\046\uff92\047\uff92\051\uff92\052\uff92\054\uff92\055\uff92\056" +
    "\uff92\057\uff92\060\uff92\061\uff92\062\uff92\064\uff92\065\uff92" +
    "\066\uff92\067\uff92\071\uff92\073\uff92\076\uff92\077\uff92\102" +
    "\uff92\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92\110\uff92" +
    "\111\uff92\001\002\000\036\016\130\017\135\043\124\050" +
    "\144\052\136\063\126\072\133\076\141\077\142\112\146" +
    "\113\134\114\140\115\145\116\037\001\002\000\044\051" +
    "\162\052\152\054\160\055\154\056\157\060\156\061\163" +
    "\062\165\064\151\065\170\066\166\067\164\071\216\106" +
    "\161\107\153\110\167\111\155\001\002\000\074\044\uffb2" +
    "\046\uffb2\047\uffb2\051\uffb2\052\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\067\uffb2\070\220\071\uffb2\073\uffb2\076\uffb2\077" +
    "\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2" +
    "\110\uffb2\111\uffb2\001\002\000\072\044\uff91\046\uff91\047" +
    "\uff91\051\uff91\052\uff91\054\uff91\055\uff91\056\uff91\057\uff91" +
    "\060\uff91\061\uff91\062\uff91\064\uff91\065\uff91\066\uff91\067" +
    "\uff91\071\uff91\073\uff91\076\uff91\077\uff91\102\uff91\103\uff91" +
    "\104\uff91\105\uff91\106\uff91\107\uff91\110\uff91\111\uff91\001" +
    "\002\000\036\016\130\017\135\043\124\050\144\052\136" +
    "\063\126\072\133\076\141\077\142\112\146\113\134\114" +
    "\140\115\145\116\037\001\002\000\044\051\162\052\152" +
    "\054\160\055\154\056\157\060\156\061\163\062\165\064" +
    "\151\065\170\066\166\067\164\071\222\106\161\107\153" +
    "\110\167\111\155\001\002\000\074\044\uffb2\046\uffb2\047" +
    "\uffb2\051\uffb2\052\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2\067" +
    "\uffb2\070\220\071\uffb2\073\uffb2\076\uffb2\077\uffb2\102\uffb2" +
    "\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111" +
    "\uffb2\001\002\000\072\044\uffb3\046\uffb3\047\uffb3\051\uffb3" +
    "\052\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\071\uffb3" +
    "\073\uffb3\076\uffb3\077\uffb3\102\uffb3\103\uffb3\104\uffb3\105" +
    "\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3\001\002\000\004" +
    "\116\037\001\002\000\072\044\uff93\046\uff93\047\uff93\051" +
    "\uff93\052\uff93\054\uff93\055\uff93\056\uff93\057\uff93\060\uff93" +
    "\061\uff93\062\uff93\064\uff93\065\uff93\066\uff93\067\uff93\071" +
    "\uff93\073\uff93\076\uff93\077\uff93\102\uff93\103\uff93\104\uff93" +
    "\105\uff93\106\uff93\107\uff93\110\uff93\111\uff93\001\002\000" +
    "\054\044\uff89\046\uff89\047\224\051\uff89\052\uff89\054\uff89" +
    "\055\uff89\056\uff89\060\uff89\061\uff89\062\uff89\064\uff89\065" +
    "\uff89\066\uff89\067\uff89\071\uff89\073\uff89\106\uff89\107\uff89" +
    "\110\uff89\111\uff89\001\002\000\052\044\uff87\046\uff87\051" +
    "\uff87\052\uff87\054\uff87\055\uff87\056\uff87\060\uff87\061\uff87" +
    "\062\uff87\064\uff87\065\uff87\066\uff87\067\uff87\071\uff87\073" +
    "\uff87\106\uff87\107\uff87\110\uff87\111\uff87\001\002\000\052" +
    "\044\uff88\046\uff88\051\uff88\052\uff88\054\uff88\055\uff88\056" +
    "\uff88\060\uff88\061\uff88\062\uff88\064\uff88\065\uff88\066\uff88" +
    "\067\uff88\071\uff88\073\uff88\106\uff88\107\uff88\110\uff88\111" +
    "\uff88\001\002\000\052\044\uff8b\046\uff8b\051\uff8b\052\uff8b" +
    "\054\uff8b\055\uff8b\056\uff8b\060\uff8b\061\uff8b\062\uff8b\064" +
    "\uff8b\065\uff8b\066\uff8b\067\uff8b\071\uff8b\073\uff8b\106\uff8b" +
    "\107\uff8b\110\uff8b\111\uff8b\001\002\000\044\051\162\052" +
    "\152\054\160\055\154\056\157\060\156\061\163\062\165" +
    "\064\151\065\170\066\166\067\164\073\242\106\161\107" +
    "\153\110\167\111\155\001\002\000\004\073\uff7f\001\002" +
    "\000\004\073\uff80\001\002\000\004\073\240\001\002\000" +
    "\004\073\uff7e\001\002\000\004\073\uff7d\001\002\000\036" +
    "\016\130\017\135\043\124\050\144\052\136\063\126\072" +
    "\133\076\141\077\142\112\146\113\134\114\140\115\145" +
    "\116\037\001\002\000\052\044\uff86\046\uff86\051\uff86\052" +
    "\uff86\054\uff86\055\uff86\056\uff86\060\uff86\061\uff86\062\uff86" +
    "\064\uff86\065\uff86\066\uff86\067\uff86\071\uff86\073\uff86\106" +
    "\uff86\107\uff86\110\uff86\111\uff86\001\002\000\052\044\uff8e" +
    "\046\uff8e\051\uff8e\052\uff8e\054\uff8e\055\uff8e\056\uff8e\060" +
    "\uff8e\061\uff8e\062\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e" +
    "\071\uff8e\073\uff8e\106\uff8e\107\uff8e\110\uff8e\111\uff8e\001" +
    "\002\000\004\072\244\001\002\000\040\016\130\017\135" +
    "\043\124\050\144\052\136\063\126\072\133\073\uff62\076" +
    "\141\077\142\112\146\113\134\114\140\115\145\116\037" +
    "\001\002\000\046\046\uff64\051\162\052\152\054\160\055" +
    "\154\056\157\060\156\061\163\062\165\064\151\065\170" +
    "\066\166\067\164\073\uff64\106\161\107\153\110\167\111" +
    "\155\001\002\000\004\073\247\001\002\000\052\044\uff65" +
    "\046\uff65\051\uff65\052\uff65\054\uff65\055\uff65\056\uff65\060" +
    "\uff65\061\uff65\062\uff65\064\uff65\065\uff65\066\uff65\067\uff65" +
    "\071\uff65\073\uff65\106\uff65\107\uff65\110\uff65\111\uff65\001" +
    "\002\000\006\046\251\073\uff60\001\002\000\040\016\130" +
    "\017\135\043\124\050\144\052\136\063\126\072\133\073" +
    "\uff62\076\141\077\142\112\146\113\134\114\140\115\145" +
    "\116\037\001\002\000\004\073\uff63\001\002\000\004\073" +
    "\uff61\001\002\000\052\044\uff8d\046\uff8d\051\uff8d\052\uff8d" +
    "\054\uff8d\055\uff8d\056\uff8d\060\uff8d\061\uff8d\062\uff8d\064" +
    "\uff8d\065\uff8d\066\uff8d\067\uff8d\071\uff8d\073\uff8d\106\uff8d" +
    "\107\uff8d\110\uff8d\111\uff8d\001\002\000\004\044\256\001" +
    "\002\000\050\004\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\021\uffa1\024\uffa1\025\uffa1\027" +
    "\uffa1\033\uffa1\034\uffa1\036\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\116\uffa1\001\002\000\024\006\046\007\054\010\042\011" +
    "\045\012\053\013\050\014\047\021\052\116\037\001\002" +
    "\000\004\073\261\001\002\000\052\044\uff85\046\uff85\051" +
    "\uff85\052\uff85\054\uff85\055\uff85\056\uff85\060\uff85\061\uff85" +
    "\062\uff85\064\uff85\065\uff85\066\uff85\067\uff85\071\uff85\073" +
    "\uff85\106\uff85\107\uff85\110\uff85\111\uff85\001\002\000\004" +
    "\024\uffc3\001\002\000\006\044\uff9e\116\037\001\002\000" +
    "\004\044\266\001\002\000\004\044\uff9f\001\002\000\040" +
    "\016\130\017\135\043\124\044\uff9c\050\144\052\136\063" +
    "\126\072\133\076\141\077\142\112\146\113\134\114\140" +
    "\115\145\116\037\001\002\000\044\044\uff9d\051\162\052" +
    "\152\054\160\055\154\056\157\060\156\061\163\062\165" +
    "\064\151\065\170\066\166\067\164\106\161\107\153\110" +
    "\167\111\155\001\002\000\004\044\271\001\002\000\006" +
    "\073\uff9a\116\037\001\002\000\004\073\274\001\002\000" +
    "\004\073\uff9b\001\002\000\004\023\070\001\002\000\050" +
    "\004\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\021\uffa2\024\uffa2\025\uffa2\027\uffa2\033\uffa2" +
    "\034\uffa2\036\uffa2\040\uffa2\041\uffa2\042\uffa2\116\uffa2\001" +
    "\002\000\050\004\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\021\uffbe\024\uffbe\025\uffbe\027" +
    "\uffbe\033\uffbe\034\uffbe\036\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\116\uffbe\001\002\000\036\016\130\017\135\043\124\050" +
    "\144\052\136\063\126\072\133\076\141\077\142\112\146" +
    "\113\134\114\140\115\145\116\037\001\002\000\036\016" +
    "\130\017\135\043\124\050\144\052\136\063\126\072\133" +
    "\076\141\077\142\112\146\113\134\114\140\115\145\116" +
    "\037\001\002\000\036\016\130\017\135\043\124\050\144" +
    "\052\136\063\126\072\133\076\141\077\142\112\146\113" +
    "\134\114\140\115\145\116\037\001\002\000\036\016\130" +
    "\017\135\043\124\050\144\052\136\063\126\072\133\076" +
    "\141\077\142\112\146\113\134\114\140\115\145\116\037" +
    "\001\002\000\036\016\130\017\135\043\124\050\144\052" +
    "\136\063\126\072\133\076\141\077\142\112\146\113\134" +
    "\114\140\115\145\116\037\001\002\000\046\044\uff99\051" +
    "\162\052\152\054\160\055\154\056\157\060\156\061\163" +
    "\062\165\064\151\065\170\066\166\067\164\073\uff99\106" +
    "\161\107\153\110\167\111\155\001\002\000\046\044\uff98" +
    "\051\162\052\152\054\160\055\154\056\157\060\156\061" +
    "\163\062\165\064\151\065\170\066\166\067\164\073\uff98" +
    "\106\161\107\153\110\167\111\155\001\002\000\046\044" +
    "\uff95\051\162\052\152\054\160\055\154\056\157\060\156" +
    "\061\163\062\165\064\151\065\170\066\166\067\164\073" +
    "\uff95\106\161\107\153\110\167\111\155\001\002\000\046" +
    "\044\uff96\051\162\052\152\054\160\055\154\056\157\060" +
    "\156\061\163\062\165\064\151\065\170\066\166\067\164" +
    "\073\uff96\106\161\107\153\110\167\111\155\001\002\000" +
    "\046\044\uff97\051\162\052\152\054\160\055\154\056\157" +
    "\060\156\061\163\062\165\064\151\065\170\066\166\067" +
    "\164\073\uff97\106\161\107\153\110\167\111\155\001\002" +
    "\000\004\116\037\001\002\000\010\044\uffb8\046\uffb8\057" +
    "\325\001\002\000\006\044\uffbc\046\uffbc\001\002\000\012" +
    "\044\uffb2\046\uffb2\057\uffb2\070\220\001\002\000\010\044" +
    "\uffb4\046\uffb4\057\uffb4\001\002\000\006\044\uffb5\046\317" +
    "\001\002\000\004\116\037\001\002\000\004\044\uffbb\001" +
    "\002\000\006\044\uffb7\046\uffb7\001\002\000\006\044\uffb5" +
    "\046\317\001\002\000\004\044\uffb6\001\002\000\006\044" +
    "\uffba\046\uffba\001\002\000\036\016\130\017\135\043\124" +
    "\050\144\052\136\063\126\072\133\076\141\077\142\112" +
    "\146\113\134\114\140\115\145\116\037\001\002\000\046" +
    "\044\uffb9\046\uffb9\051\162\052\152\054\160\055\154\056" +
    "\157\060\156\061\163\062\165\064\151\065\170\066\166" +
    "\067\164\106\161\107\153\110\167\111\155\001\002\000" +
    "\024\006\046\007\054\010\042\011\045\012\053\013\050" +
    "\014\047\021\052\116\037\001\002\000\004\044\331\001" +
    "\002\000\050\004\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\021\uffbf\024\uffbf\025\uffbf\027" +
    "\uffbf\033\uffbf\034\uffbf\036\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\116\uffbf\001\002\000\050\004\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\021\uffaf\024\uffaf" +
    "\025\uffaf\027\uffaf\033\uffaf\034\uffaf\036\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\116\uffaf\001\002\000\050\004\uffad\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\021" +
    "\uffad\024\uffad\025\uffad\027\uffad\033\uffad\034\uffad\036\uffad" +
    "\040\uffad\041\uffad\042\uffad\116\uffad\001\002\000\004\116" +
    "\037\001\002\000\004\035\336\001\002\000\004\116\037" +
    "\001\002\000\004\073\340\001\002\000\004\023\070\001" +
    "\002\000\050\004\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\021\uffa0\024\uffa0\025\uffa0\027" +
    "\uffa0\033\uffa0\034\uffa0\036\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\116\uffa0\001\002\000\070\002\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\116\uffc4\001\002\000\036\016" +
    "\130\017\135\043\124\050\144\052\136\063\126\072\133" +
    "\076\141\077\142\112\146\113\134\114\140\115\145\116" +
    "\037\001\002\000\044\051\162\052\152\054\160\055\154" +
    "\056\157\060\156\061\163\062\165\064\151\065\170\066" +
    "\166\067\164\073\345\106\161\107\153\110\167\111\155" +
    "\001\002\000\004\023\070\001\002\000\052\004\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\021\uffa6\024\uffa6\025\uffa6\026\347\027\uffa6\033\uffa6\034" +
    "\uffa6\036\uffa6\040\uffa6\041\uffa6\042\uffa6\116\uffa6\001\002" +
    "\000\004\023\070\001\002\000\050\004\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\021\uffaa" +
    "\024\uffaa\025\uffaa\027\uffaa\033\uffaa\034\uffaa\036\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\116\uffaa\001\002\000\050\004\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\021\uffa7\024\uffa7\025\uffa7\027\uffa7\033\uffa7\034\uffa7" +
    "\036\uffa7\040\uffa7\041\uffa7\042\uffa7\116\uffa7\001\002\000" +
    "\004\116\037\001\002\000\006\047\224\073\uffa9\001\002" +
    "\000\004\073\355\001\002\000\004\030\356\001\002\000" +
    "\004\045\357\001\002\000\004\023\360\001\002\000\006" +
    "\031\362\032\uffa3\001\002\000\004\032\371\001\002\000" +
    "\004\114\363\001\002\000\004\045\uff5e\001\002\000\004" +
    "\045\365\001\002\000\004\023\070\001\002\000\006\031" +
    "\uffa5\032\uffa5\001\002\000\006\031\362\032\uffa3\001\002" +
    "\000\004\032\uffa4\001\002\000\004\045\372\001\002\000" +
    "\004\023\070\001\002\000\004\024\374\001\002\000\050" +
    "\004\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\021\uffa8\024\uffa8\025\uffa8\027\uffa8\033\uffa8" +
    "\034\uffa8\036\uffa8\040\uffa8\041\uffa8\042\uffa8\116\uffa8\001" +
    "\002\000\050\004\uffae\006\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\021\uffae\024\uffae\025\uffae\027" +
    "\uffae\033\uffae\034\uffae\036\uffae\040\uffae\041\uffae\042\uffae" +
    "\116\uffae\001\002\000\044\044\377\051\162\052\152\054" +
    "\160\055\154\056\157\060\156\061\163\062\165\064\151" +
    "\065\170\066\166\067\164\106\161\107\153\110\167\111" +
    "\155\001\002\000\050\004\uffab\006\uffab\007\uffab\010\uffab" +
    "\011\uffab\012\uffab\013\uffab\014\uffab\021\uffab\024\uffab\025" +
    "\uffab\027\uffab\033\uffab\034\uffab\036\uffab\040\uffab\041\uffab" +
    "\042\uffab\116\uffab\001\002\000\004\024\uffc2\001\002\000" +
    "\050\004\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\014\uffac\021\uffac\024\uffac\025\uffac\027\uffac\033" +
    "\uffac\034\uffac\036\uffac\040\uffac\041\uffac\042\uffac\116\uffac" +
    "\001\002\000\004\044\u0103\001\002\000\026\002\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\020\ufffb\022\ufffb\001\002\000\004\116\037\001\002\000" +
    "\004\044\u0106\001\002\000\026\002\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\020\uffeb\022" +
    "\uffeb\001\002\000\004\116\037\001\002\000\004\023\u0109" +
    "\001\002\000\020\004\u0111\006\u010d\007\u0112\010\u010b\011" +
    "\u010c\012\u0113\013\u010f\001\002\000\022\004\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\024\uffd5\001" +
    "\002\000\004\116\uffc9\001\002\000\004\116\uffc8\001\002" +
    "\000\004\116\uffcb\001\002\000\004\116\037\001\002\000" +
    "\004\116\uffc6\001\002\000\004\044\u0116\001\002\000\016" +
    "\006\u010d\007\u0112\010\u010b\011\u010c\012\u0113\013\u010f\001" +
    "\002\000\004\116\uffca\001\002\000\004\116\uffc7\001\002" +
    "\000\004\044\u0115\001\002\000\022\004\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\024\uffd0\001\002" +
    "\000\022\004\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\024\uffcf\001\002\000\006\044\uffcc\057\u0119" +
    "\001\002\000\004\044\uffce\001\002\000\016\016\130\017" +
    "\135\112\146\113\134\114\140\115\145\001\002\000\004" +
    "\044\uffcd\001\002\000\022\004\u0111\006\u010d\007\u0112\010" +
    "\u010b\011\u010c\012\u0113\013\u010f\024\uffd1\001\002\000\022" +
    "\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\024\uffd3\001\002\000\004\024\u011e\001\002\000\004" +
    "\005\u011f\001\002\000\004\044\u0120\001\002\000\026\002" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\020\uffd4\022\uffd4\001\002\000\022\004\u0111\006" +
    "\u010d\007\u0112\010\u010b\011\u010c\012\u0113\013\u010f\024\uffd1" +
    "\001\002\000\004\024\uffd2\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\016\002\007\003\016\004\017\005\013\007" +
    "\004\016\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\u0106\001\001\000\006\014\u0103\015\024\001\001" +
    "\000\002\001\001\000\004\061\u0101\001\001\000\002\001" +
    "\001\000\004\063\023\001\001\000\016\002\022\003\016" +
    "\004\017\005\013\007\004\016\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\033\015\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\050\011\043\061" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\055\001\001\000\004\064\061\001\001\000\002\001\001" +
    "\000\004\013\060\001\001\000\002\001\001\000\004\012" +
    "\063\001\001\000\010\006\050\011\064\061\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\066\024" +
    "\071\001\001\000\002\001\001\000\004\070\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\111\025" +
    "\101\026\115\027\113\035\074\036\107\041\102\045\106" +
    "\046\112\047\117\056\076\061\104\001\001\000\002\001" +
    "\001\000\032\006\111\025\377\026\115\027\113\035\074" +
    "\036\107\041\102\045\106\046\112\047\117\056\076\061" +
    "\104\001\001\000\022\046\136\047\117\051\375\053\130" +
    "\054\146\055\142\056\126\061\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\050\212\077" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\326\001\001\000\004\072\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\111\025\261\026\115\027\113\035\074\036" +
    "\107\041\102\045\106\046\112\047\117\056\076\061\104" +
    "\001\001\000\004\024\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\046\136\047\117" +
    "\051\124\053\130\054\146\055\142\056\126\061\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\046\136" +
    "\047\117\051\253\053\130\054\146\055\142\056\126\061" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\212\077\242\001\001\000\024\046" +
    "\136\047\117\051\231\052\234\053\130\054\146\055\142" +
    "\056\126\061\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\046\136\047\117\051\230\053\130\054\146" +
    "\055\142\056\126\061\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\046\225\047\117\061\211\001\001" +
    "\000\010\046\210\047\117\061\211\001\001\000\002\001" +
    "\001\000\022\046\136\047\117\051\147\053\130\054\146" +
    "\055\142\056\126\061\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\046\136\047\117\051\207\053\130\054\146\055\142\056" +
    "\126\061\131\001\001\000\022\046\136\047\117\051\206" +
    "\053\130\054\146\055\142\056\126\061\131\001\001\000" +
    "\022\046\136\047\117\051\205\053\130\054\146\055\142" +
    "\056\126\061\131\001\001\000\022\046\136\047\117\051" +
    "\204\053\130\054\146\055\142\056\126\061\131\001\001" +
    "\000\022\046\136\047\117\051\203\053\130\054\146\055" +
    "\142\056\126\061\131\001\001\000\022\046\136\047\117" +
    "\051\202\053\130\054\146\055\142\056\126\061\131\001" +
    "\001\000\022\046\136\047\117\051\201\053\130\054\146" +
    "\055\142\056\126\061\131\001\001\000\022\046\136\047" +
    "\117\051\200\053\130\054\146\055\142\056\126\061\131" +
    "\001\001\000\022\046\136\047\117\051\177\053\130\054" +
    "\146\055\142\056\126\061\131\001\001\000\022\046\136" +
    "\047\117\051\176\053\130\054\146\055\142\056\126\061" +
    "\131\001\001\000\022\046\136\047\117\051\175\053\130" +
    "\054\146\055\142\056\126\061\131\001\001\000\022\046" +
    "\136\047\117\051\174\053\130\054\146\055\142\056\126" +
    "\061\131\001\001\000\022\046\136\047\117\051\173\053" +
    "\130\054\146\055\142\056\126\061\131\001\001\000\022" +
    "\046\136\047\117\051\172\053\130\054\146\055\142\056" +
    "\126\061\131\001\001\000\022\046\136\047\117\051\171" +
    "\053\130\054\146\055\142\056\126\061\131\001\001\000" +
    "\022\046\136\047\117\051\170\053\130\054\146\055\142" +
    "\056\126\061\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\212" +
    "\001\001\000\002\001\001\000\022\046\136\047\117\051" +
    "\214\053\130\054\146\055\142\056\126\061\131\001\001" +
    "\000\002\001\001\000\004\034\216\001\001\000\002\001" +
    "\001\000\022\046\136\047\117\051\220\053\130\054\146" +
    "\055\142\056\126\061\131\001\001\000\002\001\001\000" +
    "\004\034\222\001\001\000\002\001\001\000\004\061\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\046\136\047\117" +
    "\051\240\053\130\054\146\055\142\056\126\061\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\046\136\047\117\051\244\053\130\054\146\055" +
    "\142\056\126\057\245\061\131\001\001\000\004\100\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\251\001\001\000\024\046\136\047\117\051\244\053\130" +
    "\054\146\055\142\056\126\057\252\061\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\257\061\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\042\263\045\264\046\112\047\117\061\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\043\267" +
    "\046\136\047\117\051\266\053\130\054\146\055\142\056" +
    "\126\061\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\044\271\045\272\046\112\047\117\061\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\046" +
    "\136\047\117\051\307\053\130\054\146\055\142\056\126" +
    "\061\131\001\001\000\022\046\136\047\117\051\306\053" +
    "\130\054\146\055\142\056\126\061\131\001\001\000\022" +
    "\046\136\047\117\051\305\053\130\054\146\055\142\056" +
    "\126\061\131\001\001\000\022\046\136\047\117\051\304" +
    "\053\130\054\146\055\142\056\126\061\131\001\001\000" +
    "\022\046\136\047\117\051\303\053\130\054\146\055\142" +
    "\056\126\061\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\312\033\311\061\313\001\001\000\004\031" +
    "\323\001\001\000\004\073\315\001\001\000\004\034\314" +
    "\001\001\000\002\001\001\000\004\032\317\001\001\000" +
    "\010\030\320\033\311\061\313\001\001\000\002\001\001" +
    "\000\004\074\321\001\001\000\004\032\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\046\136\047\117" +
    "\051\325\053\130\054\146\055\142\056\126\061\131\001" +
    "\001\000\002\001\001\000\010\006\111\027\327\061\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\334\001\001\000\002" +
    "\001\001\000\004\061\336\001\001\000\002\001\001\000" +
    "\004\024\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\046\136\047\117\051\343\053\130\054\146\055" +
    "\142\056\126\061\131\001\001\000\002\001\001\000\004" +
    "\024\345\001\001\000\004\037\347\001\001\000\004\024" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\046\352\047\117\061\211\001\001\000\004\075\353\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\360\001\001\000\002\001" +
    "\001\000\004\062\363\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\365\001\001\000\004\076\366\001" +
    "\001\000\004\040\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\372\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u0104\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\u0107\001\001\000" +
    "\002\001\001\000\010\017\u0109\021\u010f\023\u010d\001\001" +
    "\000\004\066\u011a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\u0116\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\u0113\023\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0117\001" +
    "\001\000\002\001\001\000\004\055\u0119\001\001\000\002" +
    "\001\001\000\012\017\u011b\020\u011c\021\u010f\023\u010d\001" +
    "\001\000\004\067\u0120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\u011b\020\u0121\021\u010f\023\u010d\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


        private Scanner scanner;
        public Parser(Scanner scanner) {
            this.scanner = scanner;
        }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_part program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_part ::= global_var_dcl 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProgramContent cont = (ProgramContent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Program.getInstance().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_part ::= func_dcl 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProgramContent cont = (ProgramContent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Program.getInstance().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_part ::= struct_dcl 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProgramContent cont = (ProgramContent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Program.getInstance().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global_var_dcl ::= global_var_type id SEMI 
            {
              ProgramContent RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new GlobalVarDCL(t, id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_dcl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_var_type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global_var_type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global_var_type ::= INT 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // global_var_type ::= LONG 
            {
              Type RESULT =null;
		RESULT = Type.LONG;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // global_var_type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = Type.FLOAT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // global_var_type ::= DOUBLE 
            {
              Type RESULT =null;
		RESULT = Type.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable_type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable_type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variable_type ::= INT 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable_type ::= LONG 
            {
              Type RESULT =null;
		RESULT = Type.LONG;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variable_type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = Type.FLOAT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variable_type ::= DOUBLE 
            {
              Type RESULT =null;
		RESULT = Type.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variable_type ::= STRING 
            {
              Type RESULT =null;
		RESULT = Type.STRING;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variable_type ::= AUTO 
            {
              Type RESULT =null;
		RESULT = Type.AUTO;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_type ::= id 
            {
              Type RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Type(type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // func_dcl ::= EXTERN function_return_type id SEMI 
            {
              ProgramContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              ProgramContent RESULT =null;
FunctionArguments.getInstance().init();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // func_dcl ::= FUNCTION NT$0 function_return_type id PRANTOP arguments PRANTCL func_dcl_part 
            {
              ProgramContent RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new FunctionDCL(t, id, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // func_dcl_part ::= SEMI 
            {
              Block RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // func_dcl_part ::= block 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
t = b ? Type.toArray(t) : t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arguments ::= variable_type id function_array_dcl NT$1 arguments_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		FunctionArguments.getInstance().addArgument(id, t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arguments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arguments_part ::= COMA arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arguments_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_array_dcl ::= BRACKOP BRACKCL function_array_dcl 
            {
              Boolean RESULT =null;
		RESULT = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_array_dcl ::= 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_return_type ::= function_argument_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_return_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_return_type ::= VOID 
            {
              Type RESULT =null;
		RESULT = Type.VOID;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_return_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_argument_type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_argument_type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_argument_type ::= INT 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_argument_type ::= LONG 
            {
              Type RESULT =null;
		RESULT = Type.LONG;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_argument_type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = Type.FLOAT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_argument_type ::= DOUBLE 
            {
              Type RESULT =null;
		RESULT = Type.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_argument_type ::= STRING 
            {
              Type RESULT =null;
		RESULT = Type.STRING;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_argument_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$2 ::= 
            {
              ProgramContent RESULT =null;
Structures.getInstance().init();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$3 ::= 
            {
              ProgramContent RESULT =(ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StructVarDCL dcl = (StructVarDCL)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Structures.getInstance().addDCL(dcl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // struct_dcl ::= RECORD NT$2 id BEGIN struct_var_dcl NT$3 struct_more_var_dcl END RECORD SEMI 
            {
              ProgramContent RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ProgramContent) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		StructVarDCL dcl = (StructVarDCL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		RESULT = Structures.getInstance().getDCL(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dcl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$4 ::= 
            {
              Object RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StructVarDCL dcl = (StructVarDCL)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Structures.getInstance().addDCL(dcl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // struct_more_var_dcl ::= struct_var_dcl NT$4 struct_more_var_dcl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StructVarDCL dcl = (StructVarDCL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struct_more_var_dcl ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struct_var_dcl ::= CONST struct_var_dcl_part SEMI 
            {
              StructVarDCL RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructVarDCL dcl = (StructVarDCL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		dcl.getDescriptor().setConst(true); RESULT = dcl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struct_var_dcl ::= struct_var_dcl_part SEMI 
            {
              StructVarDCL RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructVarDCL dcl = (StructVarDCL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		dcl.getDescriptor().setConst(false); RESULT = dcl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struct_var_dcl_part ::= struct_type id struct_var_dcl_cnt 
            {
              StructVarDCL RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StructVarDCL dcl = (StructVarDCL)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		dcl.getDescriptor().setType(t); dcl.getDescriptor().setName(id); RESULT = dcl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_part",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // struct_var_dcl_cnt ::= ASSIGN const_val 
            {
              StructVarDCL RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StructVarDCL(c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_cnt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // struct_var_dcl_cnt ::= 
            {
              StructVarDCL RESULT =null;
		RESULT = new StructVarDCL(null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_cnt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struct_type ::= BOOL 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struct_type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // struct_type ::= INT 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // struct_type ::= LONG 
            {
              Type RESULT =null;
		RESULT = Type.LONG;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // struct_type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = Type.FLOAT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // struct_type ::= DOUBLE 
            {
              Type RESULT =null;
		RESULT = Type.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$5 ::= 
            {
              Block RESULT =null;
RESULT = new Block();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // block ::= BEGIN NT$5 block_content END 
            {
              Block RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Blocks.getInstance().remove();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // block_content ::= var_dcl block_content 
            {
              BlockContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // block_content ::= statement block_content 
            {
              BlockContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // block_content ::= 
            {
              BlockContent RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$6 ::= 
            {
              Object RESULT =null;
Variables.getInstance().setConstant(true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // var_dcl ::= CONST NT$6 var_dcl_part SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Variables.getInstance().setConstant(false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // var_dcl ::= var_dcl_part SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$7 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Variables.getInstance().setType(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BlockContent cont = (BlockContent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Blocks.getInstance().getCurrent().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_dcl_part ::= variable_type NT$7 var_dcl_cnt NT$8 var_dcl_cnt_extension 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BlockContent cont = (BlockContent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var_dcl_cnt ::= single_var var_dcl_cnt_part 
            {
              BlockContent RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DCL dcl = (DCL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new CompleteDCL(dcl, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // var_dcl_cnt_part ::= ASSIGN expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // var_dcl_cnt_part ::= 
            {
              Expression RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$9 ::= 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BlockContent cont = (BlockContent)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Blocks.getInstance().getCurrent().addContent(cont);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // var_dcl_cnt_extension ::= COMA var_dcl_cnt NT$9 var_dcl_cnt_extension 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		BlockContent cont = (BlockContent)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // var_dcl_cnt_extension ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // single_var ::= id array_part 
            {
              DCL RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DCL dcl = (DCL)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		dcl.setId(id); RESULT = dcl;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_var",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // array_part ::= BRACKOP expr BRACKCL array_part 
            {
              DCL RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ArrayDCL(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // array_part ::= 
            {
              DCL RESULT =null;
		RESULT = new VariableDCL();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= cond_stmt 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Blocks.getInstance().getCurrent().addContent(stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= loop_stmt 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Blocks.getInstance().getCurrent().addContent(stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= assignment SEMI 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Assignment stmt = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Blocks.getInstance().getCurrent().addContent(stmt);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= function_call SEMI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionAccess a = (FunctionAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Blocks.getInstance().getCurrent().addContent(new FunctionCall(a));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= BREAK SEMI 
            {
              Object RESULT =null;
		Blocks.getInstance().getCurrent().addContent(new Break());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		Blocks.getInstance().getCurrent().addContent(new Continue());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= RETURN expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Blocks.getInstance().getCurrent().addContent(new Return(e));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond_stmt ::= IF PRANTOP expr PRANTCL block else_part 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ifbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ifbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block ifb = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block eb = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(e, ifb, eb);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$10 ::= 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Cases.getInstance().init();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cond_stmt ::= SWITCH PRANTOP variable NT$10 PRANTCL OF COL BEGIN case_part DEFAULT COL block END 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int dbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block db = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Switch(a, db);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // else_part ::= ELSE block 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // else_part ::= 
            {
              Block RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$11 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
Cases.getInstance().addCase(i, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_part ::= CASE int_lit COL block NT$11 case_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // case_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // loop_stmt ::= FOR PRANTOP loop_init_part SEMI loop_cond_part SEMI loop_update_part PRANTCL block 
            {
              Statement RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Assignment in = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int upleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int upright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Assignment up = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new For(in, e, up, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // loop_stmt ::= REPEAT block UNTIL PRANTOP expr PRANTCL SEMI 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Repeat(b, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // loop_stmt ::= FOREACH PRANTOP id IN id PRANTCL block 
            {
              Statement RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Foreach(i1, i2, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // loop_init_part ::= assignment 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // loop_init_part ::= 
            {
              Assignment RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // loop_cond_part ::= expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // loop_cond_part ::= 
            {
              Expression RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // loop_update_part ::= assignment 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // loop_update_part ::= 
            {
              Assignment RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // assignment ::= variable ASSIGN expr 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DirectAssign(a, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // assignment ::= variable PLUSASSIGN expr 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new PlusAssign(a, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // assignment ::= variable MINUSASSIGN expr 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MinusAssign(a, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assignment ::= variable MULTASSIGN expr 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MultiplyAssign(a, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // assignment ::= variable DIVASSIGN expr 
            {
              Assignment RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DivisionAssign(a, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // variable ::= var_access 
            {
              Access RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // variable ::= variable DOT id 
            {
              Access RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StructureAccess(a); RESULT.setDescriptor(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // var_access ::= id var_access_array_part 
            {
              Access RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		a.setDescriptor(id); RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // var_access_array_part ::= BRACKOP expr BRACKCL array_part 
            {
              Access RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ArrayAccess(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access_array_part",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // var_access_array_part ::= 
            {
              Access RESULT =null;
		RESULT = new VariableAccess();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_access_array_part",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr ::= const_val 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant e = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr ::= PRANTOP expr PRANTCL 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Not(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr ::= BINOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryNot(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Uminus(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr ::= PREFMINUS2 variable 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new PrefixMinus2(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr ::= PREFPLUS2 variable 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new PrefixPlus2(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr ::= variable PREFMINUS2 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new PostfixMinus2(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr ::= variable PREFPLUS2 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new PostfixPlus2(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr ::= PRANTOP casting_type PRANTCL expr 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Casting(t, e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr ::= SIZEOF PRANTOP variable_type PRANTCL 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SizeOf(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr ::= arithmatic_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr ::= conditional_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr ::= variable 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Access a = (Access)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Variable(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr ::= function_call 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionAccess a = (FunctionAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ast.expr.function.FunctionCall(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // casting_type ::= CHAR 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // casting_type ::= INT 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // casting_type ::= FLOAT 
            {
              Type RESULT =null;
		RESULT = Type.FLOAT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // casting_type ::= DOUBLE 
            {
              Type RESULT =null;
		RESULT = Type.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // arithmatic_expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Mult(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // arithmatic_expr ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Div(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arithmatic_expr ::= expr MOD expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Mod(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arithmatic_expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Add(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arithmatic_expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Sub(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arithmatic_expr ::= expr BIAND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryAnd(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arithmatic_expr ::= expr BIOR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arithmatic_expr ::= expr BIEXOR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryXor(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // conditional_expr ::= expr LT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LT(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // conditional_expr ::= expr LTEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LE(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // conditional_expr ::= expr GT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new GT(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // conditional_expr ::= expr GTEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new GE(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // conditional_expr ::= expr EQEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new EQ(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // conditional_expr ::= expr NOTEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new NE(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // conditional_expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryAnd(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // conditional_expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOr(e1, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // const_val ::= TRUE 
            {
              Constant RESULT =null;
		RESULT = new BooleanConstant(true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // const_val ::= FALSE 
            {
              Constant RESULT =null;
		RESULT = new BooleanConstant(false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // const_val ::= CHAR_LIT 
            {
              Constant RESULT =null;
		RESULT = new CharConstant(scanner.current);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // const_val ::= INT_LIT 
            {
              Constant RESULT =null;
		RESULT = new IntegerConstant(scanner.ICV);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // const_val ::= FLOAT_LIT 
            {
              Constant RESULT =null;
		RESULT = new DoubleConstant(scanner.RCV);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // const_val ::= STR_LIT 
            {
              Constant RESULT =null;
		RESULT = new StringConstant(scanner.current);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$12 ::= 
            {
              FunctionAccess RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
FunctionAccessData.getInstance().init();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // function_call ::= id NT$12 PRANTOP parameters PRANTCL 
            {
              FunctionAccess RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (FunctionAccess) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		RESULT = new FunctionAccess(FunctionAccessData.getInstance().getParameters()); RESULT.setDescriptor(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$13 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
FunctionAccessData.getInstance().addParameter(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // parameters ::= expr NT$13 parameters_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // parameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // parameters_part ::= COMA parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // parameters_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // id ::= ID 
            {
              String RESULT =null;
		RESULT = scanner.current.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // int_lit ::= INT_LIT 
            {
              Integer RESULT =null;
		RESULT = scanner.ICV;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_lit",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
