
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import java.io.*;
import ast.block.*;
import ast.block.conditional.*;
import ast.expr.binary.arithmatic.*;
import ast.expr.unary.arithmatic.*;
import ast.expr.Expression;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\006\000\002\006\011\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\006\000\002\011\002\000\002\012\004" +
    "\000\002\012\002\000\002\013\005\000\002\013\002\000" +
    "\002\014\012\000\002\016\004\000\002\016\002\000\002" +
    "\015\005\000\002\015\004\000\002\017\005\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\005\000\002\022\004\000\002\022\004\000" +
    "\002\022\002\000\002\023\005\000\002\024\004\000\002" +
    "\024\004\000\002\024\002\000\002\025\005\000\002\025" +
    "\004\000\002\026\005\000\002\027\004\000\002\030\004" +
    "\000\002\030\002\000\002\031\005\000\002\031\002\000" +
    "\002\032\004\000\002\033\006\000\002\033\002\000\002" +
    "\034\003\000\002\034\003\000\002\034\004\000\002\034" +
    "\004\000\002\034\005\000\002\035\003\000\002\035\004" +
    "\000\002\035\004\000\002\057\002\000\002\060\002\000" +
    "\002\036\012\000\002\061\002\000\002\062\002\000\002" +
    "\036\020\000\002\037\004\000\002\037\002\000\002\063" +
    "\002\000\002\064\002\000\002\040\011\000\002\040\002" +
    "\000\002\041\013\000\002\041\011\000\002\041\011\000" +
    "\002\042\003\000\002\042\002\000\002\043\003\000\002" +
    "\043\002\000\002\044\003\000\002\044\002\000\002\045" +
    "\005\000\002\045\005\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\046\003\000\002\046\005\000" +
    "\002\046\004\000\002\046\004\000\002\046\004\000\002" +
    "\046\004\000\002\047\006\000\002\047\003\000\002\047" +
    "\003\000\002\047\005\000\002\047\004\000\002\047\004" +
    "\000\002\047\004\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\006\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\054\006\000\002" +
    "\055\004\000\002\055\002\000\002\056\004\000\002\056" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\034\002\uffff\005\022\006\024\007\007\010" +
    "\006\011\005\012\020\013\027\014\017\020\004\021\021" +
    "\022\012\116\016\001\002\000\026\006\024\007\007\010" +
    "\006\011\005\012\020\013\027\014\017\015\207\021\021" +
    "\116\016\001\002\000\006\073\uffe3\116\uffe3\001\002\000" +
    "\006\073\uff9a\116\uff9a\001\002\000\006\073\uff9b\116\uff9b" +
    "\001\002\000\034\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\116\ufffc\001\002\000\034\002\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\116\ufffe\001\002\000\026\006" +
    "\024\007\007\010\006\011\005\012\020\013\027\014\017" +
    "\015\207\021\021\116\016\001\002\000\034\002\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\020\ufffd\021\ufffd\022\ufffd\116\ufffd\001\002\000" +
    "\006\073\uffe5\116\uffe5\001\002\000\004\002\205\001\002" +
    "\000\006\073\ufff8\116\ufff8\001\002\000\006\073\ufff9\116" +
    "\ufff9\001\002\000\006\073\uff99\116\uff99\001\002\000\006" +
    "\073\uffe2\116\uffe2\001\002\000\004\116\033\001\002\000" +
    "\004\116\031\001\002\000\006\073\uffe4\116\uffe4\001\002" +
    "\000\034\002\uffff\005\022\006\024\007\007\010\006\011" +
    "\005\012\020\013\027\014\017\020\004\021\021\022\012" +
    "\116\016\001\002\000\006\073\ufffa\116\ufffa\001\002\000" +
    "\006\073\uff98\116\uff98\001\002\000\004\002\000\001\002" +
    "\000\004\044\032\001\002\000\034\002\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\116\ufffb\001\002\000\004\023" +
    "\034\001\002\000\022\004\040\006\024\007\007\010\006" +
    "\011\005\012\020\013\027\021\021\001\002\000\024\004" +
    "\040\006\024\007\007\010\006\011\005\012\020\013\027" +
    "\021\021\024\uffe9\001\002\000\004\116\044\001\002\000" +
    "\004\044\043\001\002\000\020\006\024\007\007\010\006" +
    "\011\005\012\020\013\027\021\021\001\002\000\004\044" +
    "\042\001\002\000\024\004\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\021\uffe8\024\uffe8\001\002\000" +
    "\024\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\021\uffe7\024\uffe7\001\002\000\074\044\uffcf\046" +
    "\uffcf\047\uffcf\051\uffcf\052\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\064\uffcf\065\uffcf\066" +
    "\uffcf\067\uffcf\070\160\071\uffcf\073\uffcf\076\uffcf\077\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110" +
    "\uffcf\111\uffcf\001\002\000\010\044\uffd4\046\uffd4\057\054" +
    "\001\002\000\006\044\uffd2\046\047\001\002\000\004\116" +
    "\044\001\002\000\004\044\uffe6\001\002\000\006\044\uffd2" +
    "\046\047\001\002\000\004\044\uffd3\001\002\000\006\044" +
    "\uffd6\046\uffd6\001\002\000\036\016\061\017\067\043\055" +
    "\050\076\052\070\063\057\072\065\076\073\077\074\112" +
    "\100\113\066\114\072\115\077\116\063\001\002\000\004" +
    "\072\174\001\002\000\046\044\uffd5\046\uffd5\051\114\052" +
    "\103\054\111\055\106\056\112\060\110\061\115\062\117" +
    "\064\104\065\122\066\121\067\116\106\113\107\105\110" +
    "\120\111\107\001\002\000\036\016\061\017\067\043\055" +
    "\050\076\052\070\063\057\072\065\076\073\077\074\112" +
    "\100\113\066\114\072\115\077\116\063\001\002\000\052" +
    "\044\uff9d\046\uff9d\051\uff9d\052\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\060\uff9d\061\uff9d\062\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\067\uff9d\071\uff9d\073\uff9d\106\uff9d\107\uff9d\110\uff9d\111" +
    "\uff9d\001\002\000\052\044\uff87\046\uff87\051\uff87\052\uff87" +
    "\054\uff87\055\uff87\056\uff87\060\uff87\061\uff87\062\uff87\064" +
    "\uff87\065\uff87\066\uff87\067\uff87\071\uff87\073\uff87\106\uff87" +
    "\107\uff87\110\uff87\111\uff87\001\002\000\072\044\uffac\046" +
    "\uffac\047\uffac\051\uffac\052\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\071\uffac\073\uffac\076\uffac\077\uffac\102\uffac" +
    "\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110\uffac\111" +
    "\uffac\001\002\000\064\044\uffcf\046\uffcf\047\uffcf\051\uffcf" +
    "\052\uffcf\054\uffcf\055\uffcf\056\uffcf\060\uffcf\061\uffcf\062" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\160\071\uffcf" +
    "\072\161\073\uffcf\076\uffcf\077\uffcf\106\uffcf\107\uffcf\110" +
    "\uffcf\111\uffcf\001\002\000\052\044\uffa5\046\uffa5\051\uffa5" +
    "\052\uffa5\054\uffa5\055\uffa5\056\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\071\uffa5\073\uffa5" +
    "\106\uffa5\107\uffa5\110\uffa5\111\uffa5\001\002\000\046\007" +
    "\007\010\006\012\020\013\027\016\061\017\067\043\055" +
    "\050\076\052\070\063\057\072\065\076\073\077\074\112" +
    "\100\113\066\114\072\115\077\116\063\001\002\000\052" +
    "\044\uff82\046\uff82\051\uff82\052\uff82\054\uff82\055\uff82\056" +
    "\uff82\060\uff82\061\uff82\062\uff82\064\uff82\065\uff82\066\uff82" +
    "\067\uff82\071\uff82\073\uff82\106\uff82\107\uff82\110\uff82\111" +
    "\uff82\001\002\000\052\044\uff86\046\uff86\051\uff86\052\uff86" +
    "\054\uff86\055\uff86\056\uff86\060\uff86\061\uff86\062\uff86\064" +
    "\uff86\065\uff86\066\uff86\067\uff86\071\uff86\073\uff86\106\uff86" +
    "\107\uff86\110\uff86\111\uff86\001\002\000\036\016\061\017" +
    "\067\043\055\050\076\052\070\063\057\072\065\076\073" +
    "\077\074\112\100\113\066\114\072\115\077\116\063\001" +
    "\002\000\060\044\uff9e\046\uff9e\047\146\051\uff9e\052\uff9e" +
    "\054\uff9e\055\uff9e\056\uff9e\060\uff9e\061\uff9e\062\uff9e\064" +
    "\uff9e\065\uff9e\066\uff9e\067\uff9e\071\uff9e\073\uff9e\076\144" +
    "\077\145\106\uff9e\107\uff9e\110\uff9e\111\uff9e\001\002\000" +
    "\052\044\uff84\046\uff84\051\uff84\052\uff84\054\uff84\055\uff84" +
    "\056\uff84\060\uff84\061\uff84\062\uff84\064\uff84\065\uff84\066" +
    "\uff84\067\uff84\071\uff84\073\uff84\106\uff84\107\uff84\110\uff84" +
    "\111\uff84\001\002\000\010\076\073\077\074\116\044\001" +
    "\002\000\010\076\073\077\074\116\044\001\002\000\052" +
    "\044\uff9f\046\uff9f\051\uff9f\052\uff9f\054\uff9f\055\uff9f\056" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\064\uff9f\065\uff9f\066\uff9f" +
    "\067\uff9f\071\uff9f\073\uff9f\106\uff9f\107\uff9f\110\uff9f\111" +
    "\uff9f\001\002\000\036\016\061\017\067\043\055\050\076" +
    "\052\070\063\057\072\065\076\073\077\074\112\100\113" +
    "\066\114\072\115\077\116\063\001\002\000\052\044\uff83" +
    "\046\uff83\051\uff83\052\uff83\054\uff83\055\uff83\056\uff83\060" +
    "\uff83\061\uff83\062\uff83\064\uff83\065\uff83\066\uff83\067\uff83" +
    "\071\uff83\073\uff83\106\uff83\107\uff83\110\uff83\111\uff83\001" +
    "\002\000\052\044\uff85\046\uff85\051\uff85\052\uff85\054\uff85" +
    "\055\uff85\056\uff85\060\uff85\061\uff85\062\uff85\064\uff85\065" +
    "\uff85\066\uff85\067\uff85\071\uff85\073\uff85\106\uff85\107\uff85" +
    "\110\uff85\111\uff85\001\002\000\052\044\uffa4\046\uffa4\051" +
    "\uffa4\052\uffa4\054\uffa4\055\uffa4\056\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\071\uffa4\073" +
    "\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\001\002\000\052" +
    "\044\uffa1\046\uffa1\051\uffa1\052\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\060\uffa1\061\uffa1\062\uffa1\064\uffa1\065\uffa1\066\uffa1" +
    "\067\uffa1\071\uffa1\073\uffa1\106\uffa1\107\uffa1\110\uffa1\111" +
    "\uffa1\001\002\000\036\016\061\017\067\043\055\050\076" +
    "\052\070\063\057\072\065\076\073\077\074\112\100\113" +
    "\066\114\072\115\077\116\063\001\002\000\036\016\061" +
    "\017\067\043\055\050\076\052\070\063\057\072\065\076" +
    "\073\077\074\112\100\113\066\114\072\115\077\116\063" +
    "\001\002\000\036\016\061\017\067\043\055\050\076\052" +
    "\070\063\057\072\065\076\073\077\074\112\100\113\066" +
    "\114\072\115\077\116\063\001\002\000\036\016\061\017" +
    "\067\043\055\050\076\052\070\063\057\072\065\076\073" +
    "\077\074\112\100\113\066\114\072\115\077\116\063\001" +
    "\002\000\036\016\061\017\067\043\055\050\076\052\070" +
    "\063\057\072\065\076\073\077\074\112\100\113\066\114" +
    "\072\115\077\116\063\001\002\000\036\016\061\017\067" +
    "\043\055\050\076\052\070\063\057\072\065\076\073\077" +
    "\074\112\100\113\066\114\072\115\077\116\063\001\002" +
    "\000\036\016\061\017\067\043\055\050\076\052\070\063" +
    "\057\072\065\076\073\077\074\112\100\113\066\114\072" +
    "\115\077\116\063\001\002\000\036\016\061\017\067\043" +
    "\055\050\076\052\070\063\057\072\065\076\073\077\074" +
    "\112\100\113\066\114\072\115\077\116\063\001\002\000" +
    "\036\016\061\017\067\043\055\050\076\052\070\063\057" +
    "\072\065\076\073\077\074\112\100\113\066\114\072\115" +
    "\077\116\063\001\002\000\036\016\061\017\067\043\055" +
    "\050\076\052\070\063\057\072\065\076\073\077\074\112" +
    "\100\113\066\114\072\115\077\116\063\001\002\000\036" +
    "\016\061\017\067\043\055\050\076\052\070\063\057\072" +
    "\065\076\073\077\074\112\100\113\066\114\072\115\077" +
    "\116\063\001\002\000\036\016\061\017\067\043\055\050" +
    "\076\052\070\063\057\072\065\076\073\077\074\112\100" +
    "\113\066\114\072\115\077\116\063\001\002\000\036\016" +
    "\061\017\067\043\055\050\076\052\070\063\057\072\065" +
    "\076\073\077\074\112\100\113\066\114\072\115\077\116" +
    "\063\001\002\000\036\016\061\017\067\043\055\050\076" +
    "\052\070\063\057\072\065\076\073\077\074\112\100\113" +
    "\066\114\072\115\077\116\063\001\002\000\036\016\061" +
    "\017\067\043\055\050\076\052\070\063\057\072\065\076" +
    "\073\077\074\112\100\113\066\114\072\115\077\116\063" +
    "\001\002\000\036\016\061\017\067\043\055\050\076\052" +
    "\070\063\057\072\065\076\073\077\074\112\100\113\066" +
    "\114\072\115\077\116\063\001\002\000\052\044\uff88\046" +
    "\uff88\051\114\052\103\054\111\055\106\056\112\060\110" +
    "\061\115\062\117\064\104\065\uff88\066\121\067\116\071" +
    "\uff88\073\uff88\106\113\107\105\110\120\111\107\001\002" +
    "\000\052\044\uff8f\046\uff8f\051\114\052\103\054\111\055" +
    "\106\056\112\060\uff8f\061\uff8f\062\uff8f\064\uff8f\065\uff8f" +
    "\066\uff8f\067\uff8f\071\uff8f\073\uff8f\106\uff8f\107\uff8f\110" +
    "\uff8f\111\uff8f\001\002\000\052\044\uff8e\046\uff8e\051\114" +
    "\052\103\054\111\055\106\056\112\060\uff8e\061\uff8e\062" +
    "\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\071\uff8e\073\uff8e" +
    "\106\uff8e\107\uff8e\110\uff8e\111\uff8e\001\002\000\052\044" +
    "\uff90\046\uff90\051\114\052\103\054\111\055\106\056\112" +
    "\060\110\061\uff90\062\uff90\064\uff90\065\uff90\066\121\067" +
    "\116\071\uff90\073\uff90\106\113\107\105\110\120\111\107" +
    "\001\002\000\052\044\uff8d\046\uff8d\051\114\052\103\054" +
    "\111\055\106\056\112\060\uff8d\061\uff8d\062\uff8d\064\uff8d" +
    "\065\uff8d\066\121\067\uff8d\071\uff8d\073\uff8d\106\uff8d\107" +
    "\uff8d\110\120\111\uff8d\001\002\000\052\044\uff91\046\uff91" +
    "\051\114\052\103\054\111\055\106\056\112\060\110\061" +
    "\uff91\062\117\064\uff91\065\uff91\066\121\067\116\071\uff91" +
    "\073\uff91\106\113\107\105\110\120\111\107\001\002\000" +
    "\052\044\uff94\046\uff94\051\uff94\052\uff94\054\111\055\106" +
    "\056\112\060\uff94\061\uff94\062\uff94\064\uff94\065\uff94\066" +
    "\uff94\067\uff94\071\uff94\073\uff94\106\uff94\107\uff94\110\uff94" +
    "\111\uff94\001\002\000\052\044\uff8a\046\uff8a\051\114\052" +
    "\103\054\111\055\106\056\112\060\uff8a\061\uff8a\062\uff8a" +
    "\064\uff8a\065\uff8a\066\121\067\116\071\uff8a\073\uff8a\106" +
    "\uff8a\107\uff8a\110\120\111\107\001\002\000\052\044\uff95" +
    "\046\uff95\051\uff95\052\uff95\054\uff95\055\uff95\056\uff95\060" +
    "\uff95\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95\067\uff95" +
    "\071\uff95\073\uff95\106\uff95\107\uff95\110\uff95\111\uff95\001" +
    "\002\000\052\044\uff97\046\uff97\051\uff97\052\uff97\054\uff97" +
    "\055\uff97\056\uff97\060\uff97\061\uff97\062\uff97\064\uff97\065" +
    "\uff97\066\uff97\067\uff97\071\uff97\073\uff97\106\uff97\107\uff97" +
    "\110\uff97\111\uff97\001\002\000\052\044\uff92\046\uff92\051" +
    "\114\052\103\054\111\055\106\056\112\060\uff92\061\uff92" +
    "\062\uff92\064\uff92\065\uff92\066\121\067\116\071\uff92\073" +
    "\uff92\106\113\107\105\110\120\111\107\001\002\000\052" +
    "\044\uff8c\046\uff8c\051\114\052\103\054\111\055\106\056" +
    "\112\060\uff8c\061\uff8c\062\uff8c\064\uff8c\065\uff8c\066\121" +
    "\067\uff8c\071\uff8c\073\uff8c\106\uff8c\107\uff8c\110\120\111" +
    "\uff8c\001\002\000\052\044\uff96\046\uff96\051\uff96\052\uff96" +
    "\054\uff96\055\uff96\056\uff96\060\uff96\061\uff96\062\uff96\064" +
    "\uff96\065\uff96\066\uff96\067\uff96\071\uff96\073\uff96\106\uff96" +
    "\107\uff96\110\uff96\111\uff96\001\002\000\052\044\uff8b\046" +
    "\uff8b\051\114\052\103\054\111\055\106\056\112\060\uff8b" +
    "\061\uff8b\062\uff8b\064\uff8b\065\uff8b\066\121\067\116\071" +
    "\uff8b\073\uff8b\106\uff8b\107\uff8b\110\120\111\107\001\002" +
    "\000\052\044\uff89\046\uff89\051\114\052\103\054\111\055" +
    "\106\056\112\060\110\061\115\062\117\064\uff89\065\uff89" +
    "\066\121\067\116\071\uff89\073\uff89\106\113\107\105\110" +
    "\120\111\107\001\002\000\052\044\uff93\046\uff93\051\uff93" +
    "\052\uff93\054\111\055\106\056\112\060\uff93\061\uff93\062" +
    "\uff93\064\uff93\065\uff93\066\uff93\067\uff93\071\uff93\073\uff93" +
    "\106\uff93\107\uff93\110\uff93\111\uff93\001\002\000\072\044" +
    "\uffaa\046\uffaa\047\146\051\uffaa\052\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\067\uffaa\071\uffaa\073\uffaa\076\144\077\145" +
    "\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110" +
    "\uffaa\111\uffaa\001\002\000\072\044\uffa7\046\uffa7\047\uffa7" +
    "\051\uffa7\052\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7" +
    "\071\uffa7\073\uffa7\076\uffa7\077\uffa7\102\uffa7\103\uffa7\104" +
    "\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\001\002" +
    "\000\072\044\uffa8\046\uffa8\047\uffa8\051\uffa8\052\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\067\uffa8\071\uffa8\073\uffa8\076" +
    "\uffa8\077\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\111\uffa8\001\002\000\004\116\147\001" +
    "\002\000\072\044\uffab\046\uffab\047\uffab\051\uffab\052\uffab" +
    "\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\064\uffab\065\uffab\066\uffab\067\uffab\071\uffab\073\uffab" +
    "\076\uffab\077\uffab\102\uffab\103\uffab\104\uffab\105\uffab\106" +
    "\uffab\107\uffab\110\uffab\111\uffab\001\002\000\072\044\uffa9" +
    "\046\uffa9\047\146\051\uffa9\052\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9" +
    "\066\uffa9\067\uffa9\071\uffa9\073\uffa9\076\144\077\145\102" +
    "\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9" +
    "\111\uffa9\001\002\000\052\044\uffa0\046\uffa0\051\uffa0\052" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\060\uffa0\061\uffa0\062\uffa0" +
    "\064\uffa0\065\uffa0\066\uffa0\067\uffa0\071\uffa0\073\uffa0\106" +
    "\uffa0\107\uffa0\110\uffa0\111\uffa0\001\002\000\044\051\114" +
    "\052\103\054\111\055\106\056\112\060\110\061\115\062" +
    "\117\064\104\065\122\066\121\067\116\073\156\106\113" +
    "\107\105\110\120\111\107\001\002\000\004\073\154\001" +
    "\002\000\036\016\061\017\067\043\055\050\076\052\070" +
    "\063\057\072\065\076\073\077\074\112\100\113\066\114" +
    "\072\115\077\116\063\001\002\000\052\044\uffa6\046\uffa6" +
    "\051\uffa6\052\uffa6\054\uffa6\055\uffa6\056\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\071\uffa6" +
    "\073\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\001\002\000" +
    "\052\044\uffa3\046\uffa3\051\uffa3\052\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3\065\uffa3\066" +
    "\uffa3\067\uffa3\071\uffa3\073\uffa3\106\uffa3\107\uffa3\110\uffa3" +
    "\111\uffa3\001\002\000\072\044\uffd1\046\uffd1\047\uffd1\051" +
    "\uffd1\052\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\071" +
    "\uffd1\073\uffd1\076\uffd1\077\uffd1\102\uffd1\103\uffd1\104\uffd1" +
    "\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\001\002\000" +
    "\036\016\061\017\067\043\055\050\076\052\070\063\057" +
    "\072\065\076\073\077\074\112\100\113\066\114\072\115" +
    "\077\116\063\001\002\000\040\016\061\017\067\043\055" +
    "\050\076\052\070\063\057\072\065\073\uff7f\076\073\077" +
    "\074\112\100\113\066\114\072\115\077\116\063\001\002" +
    "\000\046\046\165\051\114\052\103\054\111\055\106\056" +
    "\112\060\110\061\115\062\117\064\104\065\122\066\121" +
    "\067\116\073\uff7d\106\113\107\105\110\120\111\107\001" +
    "\002\000\004\073\164\001\002\000\052\044\uff81\046\uff81" +
    "\051\uff81\052\uff81\054\uff81\055\uff81\056\uff81\060\uff81\061" +
    "\uff81\062\uff81\064\uff81\065\uff81\066\uff81\067\uff81\071\uff81" +
    "\073\uff81\106\uff81\107\uff81\110\uff81\111\uff81\001\002\000" +
    "\040\016\061\017\067\043\055\050\076\052\070\063\057" +
    "\072\065\073\uff7f\076\073\077\074\112\100\113\066\114" +
    "\072\115\077\116\063\001\002\000\004\073\uff80\001\002" +
    "\000\004\073\uff7e\001\002\000\044\051\114\052\103\054" +
    "\111\055\106\056\112\060\110\061\115\062\117\064\104" +
    "\065\122\066\121\067\116\071\171\106\113\107\105\110" +
    "\120\111\107\001\002\000\074\044\uffcf\046\uffcf\047\uffcf" +
    "\051\uffcf\052\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf" +
    "\070\160\071\uffcf\073\uffcf\076\uffcf\077\uffcf\102\uffcf\103" +
    "\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf" +
    "\001\002\000\072\044\uffd0\046\uffd0\047\uffd0\051\uffd0\052" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\071\uffd0\073" +
    "\uffd0\076\uffd0\077\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0" +
    "\106\uffd0\107\uffd0\110\uffd0\111\uffd0\001\002\000\052\044" +
    "\uffa2\046\uffa2\051\uffa2\052\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\071\uffa2\073\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2" +
    "\001\002\000\024\006\024\007\007\010\006\011\005\012" +
    "\020\013\027\014\017\021\021\116\016\001\002\000\004" +
    "\073\176\001\002\000\052\044\uff9c\046\uff9c\051\uff9c\052" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\060\uff9c\061\uff9c\062\uff9c" +
    "\064\uff9c\065\uff9c\066\uff9c\067\uff9c\071\uff9c\073\uff9c\106" +
    "\uff9c\107\uff9c\110\uff9c\111\uff9c\001\002\000\024\004\040" +
    "\006\024\007\007\010\006\011\005\012\020\013\027\021" +
    "\021\024\uffe9\001\002\000\004\024\201\001\002\000\004" +
    "\005\202\001\002\000\004\044\203\001\002\000\034\002" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\020\uffeb\021\uffeb\022\uffeb\116\uffeb\001" +
    "\002\000\004\024\uffea\001\002\000\004\002\001\001\002" +
    "\000\004\116\211\001\002\000\004\116\ufff4\001\002\000" +
    "\004\116\ufff5\001\002\000\004\072\212\001\002\000\026" +
    "\006\024\007\007\010\006\011\005\012\020\013\027\014" +
    "\017\021\021\073\ufff0\116\016\001\002\000\004\073\225" +
    "\001\002\000\004\116\215\001\002\000\010\046\uffec\070" +
    "\217\073\uffec\001\002\000\006\046\222\073\uffee\001\002" +
    "\000\004\071\220\001\002\000\010\046\uffec\070\217\073" +
    "\uffec\001\002\000\006\046\uffed\073\uffed\001\002\000\026" +
    "\006\024\007\007\010\006\011\005\012\020\013\027\014" +
    "\017\021\021\073\ufff0\116\016\001\002\000\004\073\ufff1" +
    "\001\002\000\004\073\uffef\001\002\000\006\023\227\044" +
    "\230\001\002\000\034\002\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\116\ufff6\001\002\000\050\004\244\006\024" +
    "\007\007\010\006\011\005\012\020\013\027\014\017\021" +
    "\021\024\uffde\025\236\027\235\033\251\034\242\036\252" +
    "\042\233\076\073\077\074\116\240\001\002\000\034\002" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\020\ufff3\021\ufff3\022\ufff3\116\ufff3\001" +
    "\002\000\034\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\116\ufff2\001\002\000\050\004\244\006\024\007\007" +
    "\010\006\011\005\012\020\013\027\014\017\021\021\024" +
    "\uffde\025\236\027\235\033\251\034\242\036\252\042\233" +
    "\076\073\077\074\116\240\001\002\000\036\016\061\017" +
    "\067\043\055\050\076\052\070\063\057\072\065\076\073" +
    "\077\074\112\100\113\066\114\072\115\077\116\063\001" +
    "\002\000\004\044\376\001\002\000\004\072\352\001\002" +
    "\000\004\072\341\001\002\000\004\024\340\001\002\000" +
    "\030\047\uffcf\057\uffcf\070\160\072\161\076\uffcf\077\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\105\uffcf\116\ufff8\001\002\000" +
    "\054\004\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\021\uffcd\024\uffcd\025\uffcd\027\uffcd\033" +
    "\uffcd\034\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd\076\uffcd" +
    "\077\uffcd\116\uffcd\001\002\000\004\072\332\001\002\000" +
    "\004\044\331\001\002\000\024\006\024\007\007\010\006" +
    "\011\005\012\020\013\027\014\017\021\021\116\016\001" +
    "\002\000\004\116\044\001\002\000\022\047\146\057\317" +
    "\076\144\077\145\102\316\103\313\104\314\105\315\001" +
    "\002\000\054\004\uffce\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\021\uffce\024\uffce\025\uffce\027" +
    "\uffce\033\uffce\034\uffce\036\uffce\040\uffce\041\uffce\042\uffce" +
    "\076\uffce\077\uffce\116\uffce\001\002\000\004\044\312\001" +
    "\002\000\004\072\277\001\002\000\004\023\255\001\002" +
    "\000\050\004\244\006\024\007\007\010\006\011\005\012" +
    "\020\013\027\014\017\021\021\024\uffde\025\236\027\235" +
    "\033\251\034\242\036\252\042\233\076\073\077\074\116" +
    "\240\001\002\000\004\024\uffe0\001\002\000\054\004\244" +
    "\006\024\007\007\010\006\011\005\012\020\013\027\014" +
    "\017\021\021\024\uffda\025\236\027\235\033\251\034\242" +
    "\036\252\040\270\041\264\042\233\076\073\077\074\116" +
    "\240\001\002\000\004\037\257\001\002\000\004\072\260" +
    "\001\002\000\036\016\061\017\067\043\055\050\076\052" +
    "\070\063\057\072\065\076\073\077\074\112\100\113\066" +
    "\114\072\115\077\116\063\001\002\000\044\051\114\052" +
    "\103\054\111\055\106\056\112\060\110\061\115\062\117" +
    "\064\104\065\122\066\121\067\116\073\262\106\113\107" +
    "\105\110\120\111\107\001\002\000\004\044\263\001\002" +
    "\000\054\004\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\021\uffb9\024\uffb9\025\uffb9\027\uffb9" +
    "\033\uffb9\034\uffb9\036\uffb9\040\uffb9\041\uffb9\042\uffb9\076" +
    "\uffb9\077\uffb9\116\uffb9\001\002\000\004\044\276\001\002" +
    "\000\054\004\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\021\uffc9\024\uffc9\025\uffc9\027\uffc9" +
    "\033\uffc9\034\uffc9\036\uffc9\040\uffc9\041\uffc9\042\uffc9\076" +
    "\uffc9\077\uffc9\116\uffc9\001\002\000\054\004\244\006\024" +
    "\007\007\010\006\011\005\012\020\013\027\014\017\021" +
    "\021\024\uffda\025\236\027\235\033\251\034\242\036\252" +
    "\040\270\041\264\042\233\076\073\077\074\116\240\001" +
    "\002\000\004\024\274\001\002\000\004\044\273\001\002" +
    "\000\054\004\244\006\024\007\007\010\006\011\005\012" +
    "\020\013\027\014\017\021\021\024\uffda\025\236\027\235" +
    "\033\251\034\242\036\252\040\270\041\264\042\233\076" +
    "\073\077\074\116\240\001\002\000\004\024\uffdc\001\002" +
    "\000\054\004\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\021\uffc8\024\uffc8\025\uffc8\027\uffc8" +
    "\033\uffc8\034\uffc8\036\uffc8\040\uffc8\041\uffc8\042\uffc8\076" +
    "\uffc8\077\uffc8\116\uffc8\001\002\000\056\004\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\021" +
    "\uffdd\024\uffdd\025\uffdd\027\uffdd\033\uffdd\034\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\076\uffdd\077\uffdd\116" +
    "\uffdd\001\002\000\004\024\uffdb\001\002\000\054\004\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\021\uffc7\024\uffc7\025\uffc7\027\uffc7\033\uffc7\034\uffc7" +
    "\036\uffc7\040\uffc7\041\uffc7\042\uffc7\076\uffc7\077\uffc7\116" +
    "\uffc7\001\002\000\012\044\uffb6\076\073\077\074\116\044" +
    "\001\002\000\004\044\302\001\002\000\004\044\uffb7\001" +
    "\002\000\040\016\061\017\067\043\055\044\uffb4\050\076" +
    "\052\070\063\057\072\065\076\073\077\074\112\100\113" +
    "\066\114\072\115\077\116\063\001\002\000\044\044\uffb5" +
    "\051\114\052\103\054\111\055\106\056\112\060\110\061" +
    "\115\062\117\064\104\065\122\066\121\067\116\106\113" +
    "\107\105\110\120\111\107\001\002\000\004\044\305\001" +
    "\002\000\012\073\uffb2\076\073\077\074\116\044\001\002" +
    "\000\004\073\310\001\002\000\004\073\uffb3\001\002\000" +
    "\004\023\255\001\002\000\054\004\uffba\006\uffba\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\021\uffba\024" +
    "\uffba\025\uffba\027\uffba\033\uffba\034\uffba\036\uffba\040\uffba" +
    "\041\uffba\042\uffba\076\uffba\077\uffba\116\uffba\001\002\000" +
    "\054\004\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\021\uffd8\024\uffd8\025\uffd8\027\uffd8\033" +
    "\uffd8\034\uffd8\036\uffd8\040\uffd8\041\uffd8\042\uffd8\076\uffd8" +
    "\077\uffd8\116\uffd8\001\002\000\036\016\061\017\067\043" +
    "\055\050\076\052\070\063\057\072\065\076\073\077\074" +
    "\112\100\113\066\114\072\115\077\116\063\001\002\000" +
    "\036\016\061\017\067\043\055\050\076\052\070\063\057" +
    "\072\065\076\073\077\074\112\100\113\066\114\072\115" +
    "\077\116\063\001\002\000\036\016\061\017\067\043\055" +
    "\050\076\052\070\063\057\072\065\076\073\077\074\112" +
    "\100\113\066\114\072\115\077\116\063\001\002\000\036" +
    "\016\061\017\067\043\055\050\076\052\070\063\057\072" +
    "\065\076\073\077\074\112\100\113\066\114\072\115\077" +
    "\116\063\001\002\000\036\016\061\017\067\043\055\050" +
    "\076\052\070\063\057\072\065\076\073\077\074\112\100" +
    "\113\066\114\072\115\077\116\063\001\002\000\046\044" +
    "\uffb1\051\114\052\103\054\111\055\106\056\112\060\110" +
    "\061\115\062\117\064\104\065\122\066\121\067\116\073" +
    "\uffb1\106\113\107\105\110\120\111\107\001\002\000\046" +
    "\044\uffb0\051\114\052\103\054\111\055\106\056\112\060" +
    "\110\061\115\062\117\064\104\065\122\066\121\067\116" +
    "\073\uffb0\106\113\107\105\110\120\111\107\001\002\000" +
    "\046\044\uffad\051\114\052\103\054\111\055\106\056\112" +
    "\060\110\061\115\062\117\064\104\065\122\066\121\067" +
    "\116\073\uffad\106\113\107\105\110\120\111\107\001\002" +
    "\000\046\044\uffae\051\114\052\103\054\111\055\106\056" +
    "\112\060\110\061\115\062\117\064\104\065\122\066\121" +
    "\067\116\073\uffae\106\113\107\105\110\120\111\107\001" +
    "\002\000\046\044\uffaf\051\114\052\103\054\111\055\106" +
    "\056\112\060\110\061\115\062\117\064\104\065\122\066" +
    "\121\067\116\073\uffaf\106\113\107\105\110\120\111\107" +
    "\001\002\000\006\044\uffd2\046\047\001\002\000\004\044" +
    "\uffd7\001\002\000\004\044\330\001\002\000\054\004\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\021\uffd9\024\uffd9\025\uffd9\027\uffd9\033\uffd9\034\uffd9" +
    "\036\uffd9\040\uffd9\041\uffd9\042\uffd9\076\uffd9\077\uffd9\116" +
    "\uffd9\001\002\000\054\004\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\021\uffcc\024\uffcc\025" +
    "\uffcc\027\uffcc\033\uffcc\034\uffcc\036\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\076\uffcc\077\uffcc\116\uffcc\001\002\000\004\116" +
    "\333\001\002\000\004\035\334\001\002\000\004\116\335" +
    "\001\002\000\004\073\336\001\002\000\004\023\255\001" +
    "\002\000\054\004\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\021\uffb8\024\uffb8\025\uffb8\027" +
    "\uffb8\033\uffb8\034\uffb8\036\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\076\uffb8\077\uffb8\116\uffb8\001\002\000\072\002\uffe1\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\036\uffe1\040\uffe1\041\uffe1\042\uffe1\076\uffe1\077\uffe1\116" +
    "\uffe1\001\002\000\036\016\061\017\067\043\055\050\076" +
    "\052\070\063\057\072\065\076\073\077\074\112\100\113" +
    "\066\114\072\115\077\116\063\001\002\000\044\051\114" +
    "\052\103\054\111\055\106\056\112\060\110\061\115\062" +
    "\117\064\104\065\122\066\121\067\116\073\343\106\113" +
    "\107\105\110\120\111\107\001\002\000\004\023\uffc6\001" +
    "\002\000\004\023\227\001\002\000\056\004\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\021" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\033\uffc5\034\uffc5" +
    "\036\uffc5\040\uffc5\041\uffc5\042\uffc5\076\uffc5\077\uffc5\116" +
    "\uffc5\001\002\000\056\004\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\021\uffbf\024\uffbf\025" +
    "\uffbf\026\347\027\uffbf\033\uffbf\034\uffbf\036\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\076\uffbf\077\uffbf\116\uffbf\001\002\000" +
    "\004\023\227\001\002\000\054\004\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\021\uffc4\024" +
    "\uffc4\025\uffc4\027\uffc4\033\uffc4\034\uffc4\036\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\076\uffc4\077\uffc4\116\uffc4\001\002\000" +
    "\054\004\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\021\uffc0\024\uffc0\025\uffc0\027\uffc0\033" +
    "\uffc0\034\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\076\uffc0" +
    "\077\uffc0\116\uffc0\001\002\000\004\116\353\001\002\000" +
    "\004\073\354\001\002\000\004\030\355\001\002\000\004" +
    "\045\356\001\002\000\004\023\357\001\002\000\006\031" +
    "\361\032\uffbb\001\002\000\004\032\370\001\002\000\004" +
    "\114\362\001\002\000\004\045\363\001\002\000\004\023" +
    "\uffbe\001\002\000\004\023\227\001\002\000\006\031\uffbd" +
    "\032\uffbd\001\002\000\006\031\361\032\uffbb\001\002\000" +
    "\004\032\uffbc\001\002\000\004\045\371\001\002\000\004" +
    "\023\uffc3\001\002\000\004\023\227\001\002\000\004\024" +
    "\uffc2\001\002\000\004\024\375\001\002\000\054\004\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\021\uffc1\024\uffc1\025\uffc1\027\uffc1\033\uffc1\034\uffc1" +
    "\036\uffc1\040\uffc1\041\uffc1\042\uffc1\076\uffc1\077\uffc1\116" +
    "\uffc1\001\002\000\054\004\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\021\uffcb\024\uffcb\025" +
    "\uffcb\027\uffcb\033\uffcb\034\uffcb\036\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\076\uffcb\077\uffcb\116\uffcb\001\002\000\044\044" +
    "\u0100\051\114\052\103\054\111\055\106\056\112\060\110" +
    "\061\115\062\117\064\104\065\122\066\121\067\116\106" +
    "\113\107\105\110\120\111\107\001\002\000\054\004\uffca" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\021\uffca\024\uffca\025\uffca\027\uffca\033\uffca\034\uffca" +
    "\036\uffca\040\uffca\041\uffca\042\uffca\076\uffca\077\uffca\116" +
    "\uffca\001\002\000\004\024\uffdf\001\002\000\004\116\u0103" +
    "\001\002\000\004\044\u0104\001\002\000\034\002\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\020\ufff7\021\ufff7\022\ufff7\116\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\022\002\014\003\024\004\010\005\022\006" +
    "\012\014\007\020\025\050\013\001\001\000\012\005\207" +
    "\007\u0101\020\025\050\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\207\007\205\020\025\050\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\027\003\024\004\010\005\022\006" +
    "\012\014\007\020\025\050\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\034\017\036" +
    "\020\035\050\013\001\001\000\014\015\176\016\177\017" +
    "\036\020\035\050\013\001\001\000\006\027\045\032\044" +
    "\001\001\000\002\001\001\000\010\017\040\020\035\050" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\156\001\001\000\004\030\052\001" +
    "\001\000\004\031\047\001\001\000\006\027\050\032\044" +
    "\001\001\000\002\001\001\000\004\031\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\032\061\046\070" +
    "\047\055\051\063\052\100\053\074\054\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\032\061\046\070" +
    "\047\172\051\063\052\100\053\074\054\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\156\001\001\000\002\001\001\000\022\032\061\046" +
    "\070\047\151\050\152\051\063\052\100\053\074\054\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\032" +
    "\061\046\070\047\150\051\063\052\100\053\074\054\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\061\046\147\001\001\000\006\032\061\046\142\001\001" +
    "\000\002\001\001\000\020\032\061\046\070\047\101\051" +
    "\063\052\100\053\074\054\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\032\061\046\070\047\141\051\063\052\100\053\074" +
    "\054\057\001\001\000\020\032\061\046\070\047\140\051" +
    "\063\052\100\053\074\054\057\001\001\000\020\032\061" +
    "\046\070\047\137\051\063\052\100\053\074\054\057\001" +
    "\001\000\020\032\061\046\070\047\136\051\063\052\100" +
    "\053\074\054\057\001\001\000\020\032\061\046\070\047" +
    "\135\051\063\052\100\053\074\054\057\001\001\000\020" +
    "\032\061\046\070\047\134\051\063\052\100\053\074\054" +
    "\057\001\001\000\020\032\061\046\070\047\133\051\063" +
    "\052\100\053\074\054\057\001\001\000\020\032\061\046" +
    "\070\047\132\051\063\052\100\053\074\054\057\001\001" +
    "\000\020\032\061\046\070\047\131\051\063\052\100\053" +
    "\074\054\057\001\001\000\020\032\061\046\070\047\130" +
    "\051\063\052\100\053\074\054\057\001\001\000\020\032" +
    "\061\046\070\047\127\051\063\052\100\053\074\054\057" +
    "\001\001\000\020\032\061\046\070\047\126\051\063\052" +
    "\100\053\074\054\057\001\001\000\020\032\061\046\070" +
    "\047\125\051\063\052\100\053\074\054\057\001\001\000" +
    "\020\032\061\046\070\047\124\051\063\052\100\053\074" +
    "\054\057\001\001\000\020\032\061\046\070\047\123\051" +
    "\063\052\100\053\074\054\057\001\001\000\020\032\061" +
    "\046\070\047\122\051\063\052\100\053\074\054\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\032" +
    "\061\046\070\047\154\051\063\052\100\053\074\054\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\032\061\046\070\047\167\051\063\052\100" +
    "\053\074\054\057\001\001\000\022\032\061\046\070\047" +
    "\161\051\063\052\100\053\074\054\057\055\162\001\001" +
    "\000\004\056\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\032\061\046\070\047\161\051\063\052\100" +
    "\053\074\054\057\055\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\174\020" +
    "\025\050\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\176\016\203\017\036\020\035\050\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\213\011\212\020\025\050\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\215" +
    "\001\001\000\004\012\222\001\001\000\002\001\001\000" +
    "\004\013\220\001\001\000\002\001\001\000\012\005\213" +
    "\011\223\020\025\050\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\225\021\230\001\001\000\002" +
    "\001\001\000\034\005\244\020\025\022\236\025\252\026" +
    "\247\032\061\034\231\036\246\041\240\045\242\046\245" +
    "\050\013\054\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\244\020\025\022\u0100\025\252\026\247" +
    "\032\061\034\231\036\246\041\240\045\242\046\245\050" +
    "\013\054\233\001\001\000\020\032\061\046\070\047\376" +
    "\051\063\052\100\053\074\054\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\244\020\025\026\326" +
    "\050\013\001\001\000\006\027\324\032\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\255\001\001\000\034\005\244\020" +
    "\025\022\253\025\252\026\247\032\061\034\231\036\246" +
    "\041\240\045\242\046\245\050\013\054\233\001\001\000" +
    "\002\001\001\000\036\005\244\020\025\024\266\025\270" +
    "\026\247\032\061\034\264\035\265\036\246\041\240\045" +
    "\242\046\245\050\013\054\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\032\061\046\070\047\260\051" +
    "\063\052\100\053\074\054\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\244\020\025\024\274\025\270" +
    "\026\247\032\061\034\264\035\265\036\246\041\240\045" +
    "\242\046\245\050\013\054\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\005\244\020\025\024\271\025" +
    "\270\026\247\032\061\034\264\035\265\036\246\041\240" +
    "\045\242\046\245\050\013\054\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\061\042\277\045\300\046" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\032\061\043\303\046\070\047\302\051\063\052\100\053" +
    "\074\054\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\032\061\044\305\045\306\046\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\032\061\046" +
    "\070\047\323\051\063\052\100\053\074\054\057\001\001" +
    "\000\020\032\061\046\070\047\322\051\063\052\100\053" +
    "\074\054\057\001\001\000\020\032\061\046\070\047\321" +
    "\051\063\052\100\053\074\054\057\001\001\000\020\032" +
    "\061\046\070\047\320\051\063\052\100\053\074\054\057" +
    "\001\001\000\020\032\061\046\070\047\317\051\063\052" +
    "\100\053\074\054\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\032\061\046\070\047\341\051\063\052\100" +
    "\053\074\054\057\001\001\000\002\001\001\000\004\057" +
    "\343\001\001\000\004\021\344\001\001\000\004\060\345" +
    "\001\001\000\004\037\347\001\001\000\004\021\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\363\001" +
    "\001\000\004\021\364\001\001\000\004\064\365\001\001" +
    "\000\004\040\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\371\001\001\000\004\021\372\001\001" +
    "\000\004\062\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }


        private Scanner scanner;
        public Parser(Scanner scanner) {
            this.scanner = scanner;
        }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_part program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_part ::= global_var_dcl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_part ::= func_dcl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_part ::= struct_dcl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global_var_dcl ::= variable_type ID SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("global_var_dcl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variable_type ::= struct_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable_type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable_type ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_dcl ::= EXTERN function_type ID SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_dcl ::= FUNCTION function_type ID PRANTOP arguments PRANTCL func_dcl_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_type ::= variable_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_type ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func_dcl_part ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_dcl_part ::= block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_dcl_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arguments ::= variable_type ID function_array_dcl arguments_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arguments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arguments_part ::= COMA arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arguments_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_array_dcl ::= BRACKOP BRACKCL function_array_dcl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_array_dcl ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_array_dcl",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // struct_dcl ::= RECORD ID BEGIN struct_var_dcl struct_more_var_dcl END RECORD SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dcl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // struct_more_var_dcl ::= struct_var_dcl struct_more_var_dcl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // struct_more_var_dcl ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_more_var_dcl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // struct_var_dcl ::= CONST struct_var_dcl_part SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // struct_var_dcl ::= struct_var_dcl_part SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struct_var_dcl_part ::= struct_type var_dcl_cnt var_dcl_cnt_extension 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_var_dcl_part",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // struct_type ::= casting_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // struct_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // struct_type ::= LONG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // struct_type ::= AUTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // block ::= BEGIN block_content END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // block_content ::= var_dcl block_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // block_content ::= statement block_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // block_content ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // loop_block ::= BEGIN loop_block_content END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // loop_block_content ::= var_dcl loop_block_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // loop_block_content ::= loop_statement loop_block_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // loop_block_content ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_block_content",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_dcl ::= CONST var_dcl_part SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_dcl ::= var_dcl_part SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_dcl_part ::= variable_type var_dcl_cnt var_dcl_cnt_extension 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_part",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_dcl_cnt ::= single_var var_dcl_cnt_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_dcl_cnt_part ::= ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var_dcl_cnt_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_part",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var_dcl_cnt_extension ::= COMA var_dcl_cnt var_dcl_cnt_extension 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var_dcl_cnt_extension ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt_extension",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // single_var ::= ID array_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_var",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // array_part ::= BRACKOP expr BRACKCL array_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= cond_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= loop_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= function_call SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // loop_statement ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // loop_statement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // loop_statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
new Block();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
Blocks.BLOCK_CONTENT.top().compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cond_stmt ::= IF PRANTOP expr PRANTCL NT$0 block NT$1 else_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		new If().compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$2 ::= 
            {
              Object RESULT =null;
new Block();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
Blocks.BLOCK_CONTENT.top().compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond_stmt ::= SWITCH PRANTOP ID PRANTCL OF COL BEGIN case_part DEFAULT COL NT$2 block NT$3 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else_part ::= ELSE block 
            {
              Block RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else_part ::= 
            {
              Block RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_part",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$4 ::= 
            {
              Object RESULT =null;
new Block();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
Blocks.BLOCK_CONTENT.top().compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case_part ::= CASE INT_LIT COL NT$4 block NT$5 case_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // loop_stmt ::= FOR PRANTOP loop_init_part SEMI loop_cond_part SEMI loop_update_part PRANTCL loop_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // loop_stmt ::= REPEAT loop_block UNTIL PRANTOP expr PRANTCL SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // loop_stmt ::= FOREACH PRANTOP ID IN ID PRANTCL loop_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // loop_init_part ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // loop_init_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_init_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // loop_cond_part ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // loop_cond_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_cond_part",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // loop_update_part ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // loop_update_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_update_part",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assignment ::= variable ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignment ::= variable PLUSASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment ::= variable MINUSASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignment ::= variable MULTASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment ::= variable DIVASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variable ::= single_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variable ::= variable DOT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // variable ::= PREFMINUS2 variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variable ::= PREFPLUS2 variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // variable ::= variable PREFMINUS2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // variable ::= variable PREFPLUS2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= PRANTOP casting_type PRANTCL expr 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= arithmatic_expr 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= conditional_expr 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= PRANTOP expr PRANTCL 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= NOT expr 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= BINOT expr 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= MINUS expr 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= const_val 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= variable 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= function_call 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= SIZEOF PRANTOP variable_type PRANTCL 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // casting_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // casting_type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // casting_type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // casting_type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casting_type",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arithmatic_expr ::= expr MULT expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Mult(e1, e2).compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arithmatic_expr ::= expr DIVIDE expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Div(e1, e2).compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arithmatic_expr ::= expr MOD expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Mod(e1, e2).compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arithmatic_expr ::= expr PLUS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Add(e1, e2).compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arithmatic_expr ::= expr MINUS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Sub(e1, e2).compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arithmatic_expr ::= expr BIAND expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryAnd(e1, e2).compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // arithmatic_expr ::= expr BIOR expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOr(e1, e2).compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // arithmatic_expr ::= expr BIEXOR expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryXor(e1, e2).compile();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // conditional_expr ::= expr LT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // conditional_expr ::= expr LE expr
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // conditional_expr ::= expr GT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // conditional_expr ::= expr GE expr
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // conditional_expr ::= expr EQ expr
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // conditional_expr ::= expr NOTEQ expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // conditional_expr ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // conditional_expr ::= expr OR expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // const_val ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // const_val ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // const_val ::= CHAR_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // const_val ::= INT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // const_val ::= FLOAT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // const_val ::= STR_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // function_call ::= ID PRANTOP parameters PRANTCL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parameters ::= expr parameters_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parameters ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // parameters_part ::= COMA parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // parameters_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_part",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
